# This file was generated. Do not edit manually.

schema {
  query: Query
}

"Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`."
directive @childOf(
  "A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin."
  mimeTypes: [String!]! = [],
  "A list of types this type is a child of. Usually these are the types handled by a transformer plugin."
  types: [String!]! = []
) on OBJECT

"Add date formatting options."
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"Do not infer field types from field values."
directive @dontInfer on OBJECT

"Link to File node by relative path."
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"Infer field types from field values."
directive @infer on OBJECT

"Link to node by foreign-key relation."
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"Define the mime-types handled by this type."
directive @mimeTypes(
  "The mime-types handled by this type."
  types: [String!]! = []
) on OBJECT

"""

DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"Proxy resolver from another field."
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"Node Interface"
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type Blog implements Node {
  author: Members!
  body: String!
  canonicalUrl: String
  categories: [String]
  children: [Node!]!
  comments: Boolean!
  date: Date!
  excerpt: String
  extract: String
  frontmatter: BlogFrontmatter!
  hidden: Boolean!
  id: ID!
  image: File
  internal: Internal!
  language: String!
  layout: String!
  meaningfullyUpdatedAt: Date
  modified(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  parent: Node
  published: Boolean!
  secondAuthor: Members
  tags: [String]!
  thirdAuthor: Members
  title: String!
}

type BlogConnection {
  distinct(field: BlogFieldSelector!): [String!]!
  edges: [BlogEdge!]!
  group(field: BlogFieldSelector!, limit: Int, skip: Int): [BlogGroupConnection!]!
  max(field: BlogFieldSelector!): Float
  min(field: BlogFieldSelector!): Float
  nodes: [Blog!]!
  pageInfo: PageInfo!
  sum(field: BlogFieldSelector!): Float
  totalCount: Int!
}

type BlogEdge {
  next: Blog
  node: Blog!
  previous: Blog
}

type BlogFrontmatter {
  author: Members!
  canonicalUrl: String
  categories: [String]
  comments: Boolean!
  date: Date!
  excerpt: String
  extract: String
  hidden: Boolean!
  image: File
  language: String!
  layout: String!
  meaningfullyUpdatedAt: Date
  modified(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  published: Boolean!
  secondAuthor: Members
  tags: [String]!
  thirdAuthor: Members
  title: String!
}

type BlogGroupConnection {
  distinct(field: BlogFieldSelector!): [String!]!
  edges: [BlogEdge!]!
  field: String!
  fieldValue: String
  group(field: BlogFieldSelector!, limit: Int, skip: Int): [BlogGroupConnection!]!
  max(field: BlogFieldSelector!): Float
  min(field: BlogFieldSelector!): Float
  nodes: [Blog!]!
  pageInfo: PageInfo!
  sum(field: BlogFieldSelector!): Float
  totalCount: Int!
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldSelector!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldSelector!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldSelector!): Float
  totalCount: Int!
}

type Faqs implements Node {
  answer: String!
  body: String!
  children: [Node!]!
  faqs_id: String!
  frontmatter: FaqsFrontmatter!
  id: ID!
  internal: Internal!
  language: String!
  layout: String!
  name: String!
  order: Float
  parent: Node
  published: Boolean!
  question: String!
  show_on_career: Boolean!
  slug: String!
}

type FaqsConnection {
  distinct(field: FaqsFieldSelector!): [String!]!
  edges: [FaqsEdge!]!
  group(field: FaqsFieldSelector!, limit: Int, skip: Int): [FaqsGroupConnection!]!
  max(field: FaqsFieldSelector!): Float
  min(field: FaqsFieldSelector!): Float
  nodes: [Faqs!]!
  pageInfo: PageInfo!
  sum(field: FaqsFieldSelector!): Float
  totalCount: Int!
}

type FaqsEdge {
  next: Faqs
  node: Faqs!
  previous: Faqs
}

type FaqsFrontmatter {
  answer: String!
  faqs_id: String!
  language: String!
  layout: String!
  name: String!
  order: Float
  published: Boolean!
  question: String!
  show_on_career: Boolean!
  slug: String!
}

type FaqsGroupConnection {
  distinct(field: FaqsFieldSelector!): [String!]!
  edges: [FaqsEdge!]!
  field: String!
  fieldValue: String
  group(field: FaqsFieldSelector!, limit: Int, skip: Int): [FaqsGroupConnection!]!
  max(field: FaqsFieldSelector!): Float
  min(field: FaqsFieldSelector!): Float
  nodes: [Faqs!]!
  pageInfo: PageInfo!
  sum(field: FaqsFieldSelector!): Float
  totalCount: Int!
}

type File implements Node {
  absolutePath: String!
  accessTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
  childImageSharp: ImageSharp
  "Returns the first child node of type Mdx or null if there are no children of given type on this node"
  childMdx: Mdx
  children: [Node!]!
  "Returns all children nodes filtered by type ImageSharp"
  childrenImageSharp: [ImageSharp]
  "Returns all children nodes filtered by type Mdx"
  childrenMdx: [Mdx]
  ctime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  "Copy file to static directory and return public url to it"
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type FileConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type FileGroupConnection {
  distinct(field: FileFieldSelector!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldSelector!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldSelector!): Float
  totalCount: Int!
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)",
    base64Width: Int,
    cropFocus: ImageCropFocus = ATTENTION,
    duotone: DuotoneGradient,
    fit: ImageFit = COVER,
    grayscale: Boolean = false,
    jpegProgressive: Boolean = true,
    jpegQuality: Int,
    maxHeight: Int,
    maxWidth: Int,
    pngCompressionSpeed: Int = 4,
    pngQuality: Int,
    quality: Int,
    rotate: Int = 0,
    sizes: String = "",
    "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
    srcSetBreakpoints: [Int] = [],
    toFormat: ImageFormat = AUTO,
    toFormatBase64: ImageFormat = AUTO,
    traceSVG: Potrace,
    trim: Float = 0.0,
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    """

    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float,
    "Options to pass to sharp when generating AVIF images."
    avifOptions: AVIFOptions,
    "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
    backgroundColor: String,
    "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
    blurredOptions: BlurredOptions,
    """

    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int],
    """

    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat],
    """

    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int,
    "Options to pass to sharp when generating JPG images."
    jpgOptions: JPGOptions,
    """

    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED,
    """

    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float],
    """

    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder,
    "Options to pass to sharp when generating PNG images."
    pngOptions: PNGOptions,
    "The default quality. This is overridden by any format-specific options"
    quality: Int,
    """

    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String,
    "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
    tracedSVGOptions: Potrace,
    "Options to pass to sharp to control cropping and other image manipulations."
    transformOptions: TransformOptions,
    "Options to pass to sharp when generating WebP images."
    webpOptions: WebPOptions,
    """

    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int
  ): GatsbyImageData!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldSelector!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldSelector!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldSelector!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

type Internal {
  content: String
  contentDigest: String!
  contentFilePath: String
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

type Jobs implements Node {
  Show_recruiter_info: Boolean
  body: String!
  button: String!
  button_instagram: String
  button_linkedin: String
  children: [Node!]!
  date(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  frontmatter: JobsFrontmatter!
  hidden: Boolean
  hours: String!
  id: ID!
  image_alt_job: String!
  image_alt_recruiter_info: String
  image_recruiter_info: File
  imagejob: File
  internal: Internal!
  language: String!
  layout: String!
  links_more_about_us: String
  name_recruiter: String
  order: Float!
  parent: Node
  published: Boolean!
  recruting_image2_title: String!
  recruting_image3_title: String!
  redirect_from: String
  salary: String!
  salary_max: Float
  salary_min: Float
  show_new_title_more_about_us: Boolean!
  show_recruiter_info: Boolean!
  subtitle: String!
  technology: String!
  title: String!
  title_more_about_us: String
  title_recruiter_info: String
  working_time: String!
  workplace_recruiter: String
}

type JobsConnection {
  distinct(field: JobsFieldSelector!): [String!]!
  edges: [JobsEdge!]!
  group(field: JobsFieldSelector!, limit: Int, skip: Int): [JobsGroupConnection!]!
  max(field: JobsFieldSelector!): Float
  min(field: JobsFieldSelector!): Float
  nodes: [Jobs!]!
  pageInfo: PageInfo!
  sum(field: JobsFieldSelector!): Float
  totalCount: Int!
}

type JobsEdge {
  next: Jobs
  node: Jobs!
  previous: Jobs
}

type JobsFrontmatter {
  Show_recruiter_info: Boolean
  button: String!
  button_instagram: String
  button_linkedin: String
  date(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  hidden: Boolean
  hours: String!
  image_alt_job: String!
  image_alt_recruiter_info: String
  image_recruiter_info: File
  imagejob: File
  language: String!
  layout: String!
  links_more_about_us: String
  name_recruiter: String
  order: Float!
  published: Boolean!
  recruting_image2_title: String!
  recruting_image3_title: String!
  redirect_from: String
  salary: String!
  salary_max: Float
  salary_min: Float
  show_new_title_more_about_us: Boolean!
  show_recruiter_info: Boolean!
  subtitle: String!
  technology: String!
  title: String!
  title_more_about_us: String
  title_recruiter_info: String
  working_time: String!
  workplace_recruiter: String
}

type JobsGroupConnection {
  distinct(field: JobsFieldSelector!): [String!]!
  edges: [JobsEdge!]!
  field: String!
  fieldValue: String
  group(field: JobsFieldSelector!, limit: Int, skip: Int): [JobsGroupConnection!]!
  max(field: JobsFieldSelector!): Float
  min(field: JobsFieldSelector!): Float
  nodes: [Jobs!]!
  pageInfo: PageInfo!
  sum(field: JobsFieldSelector!): Float
  totalCount: Int!
}

type Mdx implements Node {
  body: String
  "Returns the first child node of type Blog or null if there are no children of given type on this node"
  childBlog: Blog
  "Returns the first child node of type Faqs or null if there are no children of given type on this node"
  childFaqs: Faqs
  "Returns the first child node of type Jobs or null if there are no children of given type on this node"
  childJobs: Jobs
  "Returns the first child node of type Members or null if there are no children of given type on this node"
  childMembers: Members
  "Returns the first child node of type OurAreas or null if there are no children of given type on this node"
  childOurAreas: OurAreas
  "Returns the first child node of type Projects or null if there are no children of given type on this node"
  childProjects: Projects
  children: [Node!]!
  "Returns all children nodes filtered by type Blog"
  childrenBlog: [Blog]
  "Returns all children nodes filtered by type Faqs"
  childrenFaqs: [Faqs]
  "Returns all children nodes filtered by type Jobs"
  childrenJobs: [Jobs]
  "Returns all children nodes filtered by type Members"
  childrenMembers: [Members]
  "Returns all children nodes filtered by type OurAreas"
  childrenOurAreas: [OurAreas]
  "Returns all children nodes filtered by type Projects"
  childrenProjects: [Projects]
  excerpt(pruneLength: Int = 140): String
  fields: MdxFields
  frontmatter: MdxFrontmatter
  id: ID!
  internal: Internal!
  parent: Node
  tableOfContents(maxDepth: Int): JSON
}

type MdxConnection {
  distinct(field: MdxFieldSelector!): [String!]!
  edges: [MdxEdge!]!
  group(field: MdxFieldSelector!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldSelector!): Float
  totalCount: Int!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

type MdxFields {
  modifiedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  slug: String
  timeToRead: MdxFieldsTimeToRead
}

type MdxFieldsTimeToRead {
  minutes: Float
  text: String
  time: Int
  words: Int
}

type MdxFrontmatter {
  Hero_Image_alt: String
  Show_recruiter_info: Boolean
  answer: SimpleMdx
  author: String
  author_id: String
  avatar: File
  avatar_hover: File
  bar_achievements: [MdxFrontmatterBar_achievements]
  bar_stack: [String]
  bio: String
  bullet_points: [String]
  button: String
  button2: String
  button_instagram: String
  button_linkedin: String
  canonicalUrl: String
  categories: [String]
  comments: Boolean
  date(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  description: String
  description_contact: String
  description_mdx: SimpleMdx
  descrption: String
  email: String
  ex: Boolean
  excerpt: String
  extract: String
  faqs: [Mdx]
  faqs_id: String
  github: String
  hero_image: File
  hero_image_alt: String
  hidden: Boolean
  highlighted_word: String
  hobby: String
  hours: String
  image: File
  image_alt_job: String
  image_alt_our_service: String
  image_alt_our_service_desktop: String
  image_alt_our_service_mobile: String
  image_alt_recruiter_info: String
  image_our_service: File
  image_our_service_desktop: File
  image_our_service_mobile: File
  image_recruiter_info: File
  imagejob: File
  intro: String
  language: String
  layout: String
  links_more_about_us: SimpleMdx
  meaningfullyUpdatedAt(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  meta_description: String
  meta_title: String
  modified(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  name: String
  name_recruiter: String
  order: Int
  our_service: [Mdx]
  our_service_id: String
  our_services_icon: File
  project: [Mdx]
  project_id: String
  published: Boolean
  question: String
  recruting_image2_title: String
  recruting_image3_title: String
  redirect_from: [String]
  salary: String
  salary_min: Int
  secondAuthor: String
  short_description: String
  short_name: String
  show_case_study: Boolean
  show_new_title_more_about_us: Boolean
  show_on_career: Boolean
  show_on_homepage: Boolean
  show_recruiter_info: Boolean
  show_team: Boolean
  show_technology_stack: Boolean
  slug: String
  social_media_previev: File
  social_media_previev_alt: String
  stackoverflow: String
  subtitle: String
  tags: [String]
  team_members: [String]
  technology: [String]
  thirdAuthor: String
  title: String
  title_case_study: String
  title_contact: String
  title_faqs: String
  title_more_about_us: String
  title_recruiter_info: String
  title_team: String
  twitter: String
  web: String
  working_time: String
  workplace_recruiter: String
  blog_section_tags: [String]
  testimonials: [Testimonials]
  boxes: [Boxes]
}

type MdxFrontmatterBar_achievements {
  label: String
  number: String
}

type MdxGroupConnection {
  distinct(field: MdxFieldSelector!): [String!]!
  edges: [MdxEdge!]!
  field: String!
  fieldValue: String
  group(field: MdxFieldSelector!, limit: Int, skip: Int): [MdxGroupConnection!]!
  max(field: MdxFieldSelector!): Float
  min(field: MdxFieldSelector!): Float
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  sum(field: MdxFieldSelector!): Float
  totalCount: Int!
}

type Members implements Node {
  author_id: String!
  avatar: File
  avatar_hover: File
  bio: String!
  body: String!
  children: [Node!]!
  crosspost: String
  description: String!
  descrption: String
  email: String!
  ex: Boolean
  frontmatter: MembersFrontmatter!
  github: String
  hobby: String
  id: ID!
  internal: Internal!
  language: String!
  layout: String!
  name: String!
  parent: Node
  posts: [Blog]
  published: Boolean!
  redirect_from: String
  short_name: String!
  slug: String!
  stackoverflow: String
  title: String
  twitter: String
  web: String
}

type MembersConnection {
  distinct(field: MembersFieldSelector!): [String!]!
  edges: [MembersEdge!]!
  group(field: MembersFieldSelector!, limit: Int, skip: Int): [MembersGroupConnection!]!
  max(field: MembersFieldSelector!): Float
  min(field: MembersFieldSelector!): Float
  nodes: [Members!]!
  pageInfo: PageInfo!
  sum(field: MembersFieldSelector!): Float
  totalCount: Int!
}

type MembersEdge {
  next: Members
  node: Members!
  previous: Members
}

type MembersFrontmatter {
  author_id: String!
  avatar: File
  avatar_hover: File
  bio: String!
  crosspost: String
  description: String!
  descrption: String
  email: String!
  ex: Boolean
  github: String
  hobby: String
  language: String!
  layout: String!
  name: String!
  published: Boolean!
  redirect_from: String
  short_name: String!
  slug: String!
  stackoverflow: String
  title: String
  twitter: String
  web: String
}

type MembersGroupConnection {
  distinct(field: MembersFieldSelector!): [String!]!
  edges: [MembersEdge!]!
  field: String!
  fieldValue: String
  group(field: MembersFieldSelector!, limit: Int, skip: Int): [MembersGroupConnection!]!
  max(field: MembersFieldSelector!): Float
  min(field: MembersFieldSelector!): Float
  nodes: [Members!]!
  pageInfo: PageInfo!
  sum(field: MembersFieldSelector!): Float
  totalCount: Int!
}

type OurAreas implements Node {
  bar_stack: String!
  body: String!
  bullet_points: String!
  button: String!
  button2: String!
  children: [Node!]!
  description_contact: String!
  description_mdx: String
  faqs: [Faqs]!
  frontmatter: OurAreasFrontmatter!
  highlighted_word: String!
  id: ID!
  image_alt_our_service: String!
  image_alt_our_service_desktop: String
  image_alt_our_service_mobile: String
  image_our_service: File
  image_our_service_desktop: File
  image_our_service_mobile: File
  internal: Internal!
  intro: String
  language: String!
  layout: String!
  meta_description: String!
  meta_title: String!
  name: String!
  order: Float
  our_service_id: String!
  our_services_icon: File
  parent: Node
  project: [Projects]!
  published: Boolean!
  short_description: String!
  show_case_study: Boolean!
  show_technology_stack: Boolean!
  slug: String!
  team_members: [Members]!
  title: String!
  title_case_study: String!
  title_contact: String!
  title_faqs: String!
  title_team: String!
}

type OurAreasConnection {
  distinct(field: OurAreasFieldSelector!): [String!]!
  edges: [OurAreasEdge!]!
  group(field: OurAreasFieldSelector!, limit: Int, skip: Int): [OurAreasGroupConnection!]!
  max(field: OurAreasFieldSelector!): Float
  min(field: OurAreasFieldSelector!): Float
  nodes: [OurAreas!]!
  pageInfo: PageInfo!
  sum(field: OurAreasFieldSelector!): Float
  totalCount: Int!
}

type OurAreasEdge {
  next: OurAreas
  node: OurAreas!
  previous: OurAreas
}

type Testimonials {
  testimonials_quote: SimpleMdx
  testimonials_author: String
  testimonials_position: String
  testimonials_company: String
}

type Boxes {
  box_title: String!
  box_description: SimpleMdx
  box_icon: File
}

type OurAreasFrontmatter {
  bar_stack: String!
  bullet_points: String!
  button: String!
  button2: String!
  description_contact: String!
  description_mdx: String
  faqs: [Faqs]!
  highlighted_word: String!
  image_alt_our_service: String!
  image_alt_our_service_desktop: String
  image_alt_our_service_mobile: String
  image_our_service: File
  image_our_service_desktop: File
  image_our_service_mobile: File
  intro: String
  language: String!
  layout: String!
  meta_description: String!
  meta_title: String!
  name: String!
  order: Float
  our_service_id: String!
  our_services_icon: File
  project: [Projects]!
  published: Boolean!
  short_description: String!
  show_case_study: Boolean!
  show_technology_stack: Boolean!
  slug: String!
  team_members: [Members]!
  title: String!
  title_case_study: String!
  title_contact: String!
  title_faqs: String!
  title_team: String!
  blog_section: Boolean!
  blog_section_tags: [String]
  blog_section_title: String
  testimonials: [Testimonials]!
  boxes: [Boxes]!
}

type OurAreasGroupConnection {
  distinct(field: OurAreasFieldSelector!): [String!]!
  edges: [OurAreasEdge!]!
  field: String!
  fieldValue: String
  group(field: OurAreasFieldSelector!, limit: Int, skip: Int): [OurAreasGroupConnection!]!
  max(field: OurAreasFieldSelector!): Float
  min(field: OurAreasFieldSelector!): Float
  nodes: [OurAreas!]!
  pageInfo: PageInfo!
  sum(field: OurAreasFieldSelector!): Float
  totalCount: Int!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

type Projects implements Node {
  Hero_Image_alt: String!
  bar_achievements: String!
  body: String!
  children: [Node!]!
  description: String!
  description_contact: String!
  frontmatter: ProjectsFrontmatter!
  hero_image: File
  hero_image_alt: String
  id: ID!
  image: File
  internal: Internal!
  language: String!
  layout: String!
  order: Float
  our_service: [OurAreas]!
  parent: Node
  project_id: String!
  published: Boolean!
  redirect_from: String
  show_case_study: Boolean!
  show_on_homepage: Boolean!
  show_team: Boolean!
  slug: String!
  social_media_previev: File
  social_media_previev_alt: String!
  tags: String!
  team_members: [Members]!
  title: String!
  title_case_study: String!
  title_contact: String!
  title_team: String!
  work_in_progress: Boolean!
}

type ProjectsConnection {
  distinct(field: ProjectsFieldSelector!): [String!]!
  edges: [ProjectsEdge!]!
  group(field: ProjectsFieldSelector!, limit: Int, skip: Int): [ProjectsGroupConnection!]!
  max(field: ProjectsFieldSelector!): Float
  min(field: ProjectsFieldSelector!): Float
  nodes: [Projects!]!
  pageInfo: PageInfo!
  sum(field: ProjectsFieldSelector!): Float
  totalCount: Int!
}

type ProjectsEdge {
  next: Projects
  node: Projects!
  previous: Projects
}

type ProjectsFrontmatter {
  Hero_Image_alt: String!
  bar_achievements: String!
  description: String!
  description_contact: String!
  hero_image: File
  hero_image_alt: String
  image: File
  language: String!
  layout: String!
  order: Float
  our_service: [OurAreas]!
  project_id: String!
  published: Boolean!
  redirect_from: String
  show_case_study: Boolean!
  show_on_homepage: Boolean!
  show_team: Boolean!
  slug: String!
  social_media_previev: File
  social_media_previev_alt: String!
  tags: String!
  team_members: [Members]!
  title: String!
  title_case_study: String!
  title_contact: String!
  title_team: String!
  work_in_progress: Boolean!
}

type ProjectsGroupConnection {
  distinct(field: ProjectsFieldSelector!): [String!]!
  edges: [ProjectsEdge!]!
  field: String!
  fieldValue: String
  group(field: ProjectsFieldSelector!, limit: Int, skip: Int): [ProjectsGroupConnection!]!
  max(field: ProjectsFieldSelector!): Float
  min(field: ProjectsFieldSelector!): Float
  nodes: [Projects!]!
  pageInfo: PageInfo!
  sum(field: ProjectsFieldSelector!): Float
  totalCount: Int!
}

type Query {
  allBlog(filter: BlogFilterInput, limit: Int, skip: Int, sort: [BlogSortInput]): BlogConnection!
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: [DirectorySortInput]): DirectoryConnection!
  allFaqs(filter: FaqsFilterInput, limit: Int, skip: Int, sort: [FaqsSortInput]): FaqsConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: [FileSortInput]): FileConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: [ImageSharpSortInput]): ImageSharpConnection!
  allJobs(filter: JobsFilterInput, limit: Int, skip: Int, sort: [JobsSortInput]): JobsConnection!
  allMdx(filter: MdxFilterInput, limit: Int, skip: Int, sort: [MdxSortInput]): MdxConnection!
  allMembers(filter: MembersFilterInput, limit: Int, skip: Int, sort: [MembersSortInput]): MembersConnection!
  allOurAreas(filter: OurAreasFilterInput, limit: Int, skip: Int, sort: [OurAreasSortInput]): OurAreasConnection!
  allProjects(filter: ProjectsFilterInput, limit: Int, skip: Int, sort: [ProjectsSortInput]): ProjectsConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: [SiteSortInput]): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: [SiteBuildMetadataSortInput]): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: [SiteFunctionSortInput]): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: [SitePageSortInput]): SitePageConnection!
  allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: [SitePluginSortInput]): SitePluginConnection!
  blog(author: MembersFilterInput, body: StringQueryOperatorInput, canonicalUrl: StringQueryOperatorInput, categories: StringQueryOperatorInput, children: NodeFilterListInput, comments: BooleanQueryOperatorInput, date: DateQueryOperatorInput, excerpt: StringQueryOperatorInput, extract: StringQueryOperatorInput, frontmatter: BlogFrontmatterFilterInput, hidden: BooleanQueryOperatorInput, id: StringQueryOperatorInput, image: FileFilterInput, internal: InternalFilterInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, meaningfullyUpdatedAt: DateQueryOperatorInput, modified: DateQueryOperatorInput, parent: NodeFilterInput, published: BooleanQueryOperatorInput, secondAuthor: MembersFilterInput, tags: StringQueryOperatorInput, thirdAuthor: MembersFilterInput, title: StringQueryOperatorInput): Blog
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  faqs(answer: StringQueryOperatorInput, body: StringQueryOperatorInput, children: NodeFilterListInput, faqs_id: StringQueryOperatorInput, frontmatter: FaqsFrontmatterFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, name: StringQueryOperatorInput, order: FloatQueryOperatorInput, parent: NodeFilterInput, published: BooleanQueryOperatorInput, question: StringQueryOperatorInput, show_on_career: BooleanQueryOperatorInput, slug: StringQueryOperatorInput): Faqs
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, childMdx: MdxFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, childrenMdx: MdxFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  jobs(Show_recruiter_info: BooleanQueryOperatorInput, body: StringQueryOperatorInput, button: StringQueryOperatorInput, button_instagram: StringQueryOperatorInput, button_linkedin: StringQueryOperatorInput, children: NodeFilterListInput, date: DateQueryOperatorInput, description: StringQueryOperatorInput, frontmatter: JobsFrontmatterFilterInput, hidden: BooleanQueryOperatorInput, hours: StringQueryOperatorInput, id: StringQueryOperatorInput, image_alt_job: StringQueryOperatorInput, image_alt_recruiter_info: StringQueryOperatorInput, image_recruiter_info: FileFilterInput, imagejob: FileFilterInput, internal: InternalFilterInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, links_more_about_us: StringQueryOperatorInput, name_recruiter: StringQueryOperatorInput, order: FloatQueryOperatorInput, parent: NodeFilterInput, published: BooleanQueryOperatorInput, recruting_image2_title: StringQueryOperatorInput, recruting_image3_title: StringQueryOperatorInput, redirect_from: StringQueryOperatorInput, salary: StringQueryOperatorInput, salary_max: FloatQueryOperatorInput, salary_min: FloatQueryOperatorInput, show_new_title_more_about_us: BooleanQueryOperatorInput, show_recruiter_info: BooleanQueryOperatorInput, subtitle: StringQueryOperatorInput, technology: StringQueryOperatorInput, title: StringQueryOperatorInput, title_more_about_us: StringQueryOperatorInput, title_recruiter_info: StringQueryOperatorInput, working_time: StringQueryOperatorInput, workplace_recruiter: StringQueryOperatorInput): Jobs
  mdx(body: StringQueryOperatorInput, childBlog: BlogFilterInput, childFaqs: FaqsFilterInput, childJobs: JobsFilterInput, childMembers: MembersFilterInput, childOurAreas: OurAreasFilterInput, childProjects: ProjectsFilterInput, children: NodeFilterListInput, childrenBlog: BlogFilterListInput, childrenFaqs: FaqsFilterListInput, childrenJobs: JobsFilterListInput, childrenMembers: MembersFilterListInput, childrenOurAreas: OurAreasFilterListInput, childrenProjects: ProjectsFilterListInput, excerpt: StringQueryOperatorInput, fields: MdxFieldsFilterInput, frontmatter: MdxFrontmatterFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, tableOfContents: JSONQueryOperatorInput): Mdx
  members(author_id: StringQueryOperatorInput, avatar: FileFilterInput, avatar_hover: FileFilterInput, bio: StringQueryOperatorInput, body: StringQueryOperatorInput, children: NodeFilterListInput, crosspost: StringQueryOperatorInput, description: StringQueryOperatorInput, descrption: StringQueryOperatorInput, email: StringQueryOperatorInput, ex: BooleanQueryOperatorInput, frontmatter: MembersFrontmatterFilterInput, github: StringQueryOperatorInput, hobby: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, name: StringQueryOperatorInput, parent: NodeFilterInput, posts: BlogFilterListInput, published: BooleanQueryOperatorInput, redirect_from: StringQueryOperatorInput, short_name: StringQueryOperatorInput, slug: StringQueryOperatorInput, stackoverflow: StringQueryOperatorInput, title: StringQueryOperatorInput, twitter: StringQueryOperatorInput, web: StringQueryOperatorInput): Members
  ourAreas(bar_stack: StringQueryOperatorInput, body: StringQueryOperatorInput, bullet_points: StringQueryOperatorInput, button: StringQueryOperatorInput, button2: StringQueryOperatorInput, children: NodeFilterListInput, description_contact: StringQueryOperatorInput, description_mdx: StringQueryOperatorInput, faqs: FaqsFilterListInput, frontmatter: OurAreasFrontmatterFilterInput, highlighted_word: StringQueryOperatorInput, id: StringQueryOperatorInput, image_alt_our_service: StringQueryOperatorInput, image_alt_our_service_desktop: StringQueryOperatorInput, image_alt_our_service_mobile: StringQueryOperatorInput, image_our_service: FileFilterInput, image_our_service_desktop: FileFilterInput, image_our_service_mobile: FileFilterInput, internal: InternalFilterInput, intro: StringQueryOperatorInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, meta_description: StringQueryOperatorInput, meta_title: StringQueryOperatorInput, name: StringQueryOperatorInput, order: FloatQueryOperatorInput, our_service_id: StringQueryOperatorInput, our_services_icon: FileFilterInput, parent: NodeFilterInput, project: ProjectsFilterListInput, published: BooleanQueryOperatorInput, short_description: StringQueryOperatorInput, show_case_study: BooleanQueryOperatorInput, show_technology_stack: BooleanQueryOperatorInput, slug: StringQueryOperatorInput, team_members: MembersFilterListInput, title: StringQueryOperatorInput, title_case_study: StringQueryOperatorInput, title_contact: StringQueryOperatorInput, title_faqs: StringQueryOperatorInput, title_team: StringQueryOperatorInput): OurAreas
  projects(Hero_Image_alt: StringQueryOperatorInput, bar_achievements: StringQueryOperatorInput, body: StringQueryOperatorInput, children: NodeFilterListInput, description: StringQueryOperatorInput, description_contact: StringQueryOperatorInput, frontmatter: ProjectsFrontmatterFilterInput, hero_image: FileFilterInput, hero_image_alt: StringQueryOperatorInput, id: StringQueryOperatorInput, image: FileFilterInput, internal: InternalFilterInput, language: StringQueryOperatorInput, layout: StringQueryOperatorInput, order: FloatQueryOperatorInput, our_service: OurAreasFilterListInput, parent: NodeFilterInput, project_id: StringQueryOperatorInput, published: BooleanQueryOperatorInput, redirect_from: StringQueryOperatorInput, show_case_study: BooleanQueryOperatorInput, show_on_homepage: BooleanQueryOperatorInput, show_team: BooleanQueryOperatorInput, slug: StringQueryOperatorInput, social_media_previev: FileFilterInput, social_media_previev_alt: StringQueryOperatorInput, tags: StringQueryOperatorInput, team_members: MembersFilterListInput, title: StringQueryOperatorInput, title_case_study: StringQueryOperatorInput, title_contact: StringQueryOperatorInput, title_team: StringQueryOperatorInput, work_in_progress: BooleanQueryOperatorInput): Projects
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, flags: SiteFlagsFilterInput, graphqlTypegen: SiteGraphqlTypegenFilterInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, mapping: SiteMappingFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
  sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type SimpleMdx {
  html: String
}

type Site implements Node {
  buildTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  children: [Node!]!
  flags: SiteFlags
  graphqlTypegen: SiteGraphqlTypegen
  host: String
  id: ID!
  internal: Internal!
  jsxRuntime: String
  mapping: SiteMapping
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  port: Int
  siteMetadata: SiteSiteMetadata
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
    difference: String,
    "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
    formatString: String,
    "Returns a string generated with Moment.js' `fromNow` function"
    fromNow: Boolean,
    "Configures the locale Moment.js will use to format the date."
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldSelector!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldSelector!): Float
  totalCount: Int!
}

type SiteConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

type SiteFlags {
  DEV_SSR: Boolean
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldSelector!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldSelector!): Float
  totalCount: Int!
}

type SiteGraphqlTypegen {
  documentSearchPaths: [String]
  generateOnBuild: Boolean
  typesOutputPath: String
}

type SiteGroupConnection {
  distinct(field: SiteFieldSelector!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldSelector!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldSelector!): Float
  totalCount: Int!
}

type SiteMapping {
  Mdx_frontmatter_faqs: String
  Mdx_frontmatter_our_service: String
  Mdx_frontmatter_project: String
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
  pluginCreator: SitePlugin
}

type SitePageConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldSelector!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldSelector!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldSelector!): Float
  totalCount: Int!
}

type SitePlugin implements Node {
  browserAPIs: [String]
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  nodeAPIs: [String]
  packageJson: JSON
  parent: Node
  pluginFilepath: String
  pluginOptions: JSON
  resolve: String
  ssrAPIs: [String]
  version: String
}

type SitePluginConnection {
  distinct(field: SitePluginFieldSelector!): [String!]!
  edges: [SitePluginEdge!]!
  group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldSelector!): Float
  totalCount: Int!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  distinct(field: SitePluginFieldSelector!): [String!]!
  edges: [SitePluginEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePluginFieldSelector!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  sum(field: SitePluginFieldSelector!): Float
  totalCount: Int!
}

type SiteSiteMetadata {
  author: String
  description: String
  disqusShortname: String
  siteUrl: String
  title: String
}

enum FieldSelectorEnum {
  SELECT
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

enum SortOrderEnum {
  ASC
  DESC
}

"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

scalar GatsbyImageData

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlogFieldSelector {
  author: MembersFieldSelector
  body: FieldSelectorEnum
  canonicalUrl: FieldSelectorEnum
  categories: FieldSelectorEnum
  children: NodeFieldSelector
  comments: FieldSelectorEnum
  date: FieldSelectorEnum
  excerpt: FieldSelectorEnum
  extract: FieldSelectorEnum
  frontmatter: BlogFrontmatterFieldSelector
  hidden: FieldSelectorEnum
  id: FieldSelectorEnum
  image: FileFieldSelector
  internal: InternalFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  meaningfullyUpdatedAt: FieldSelectorEnum
  modified: FieldSelectorEnum
  parent: NodeFieldSelector
  published: FieldSelectorEnum
  secondAuthor: MembersFieldSelector
  tags: FieldSelectorEnum
  thirdAuthor: MembersFieldSelector
  title: FieldSelectorEnum
}

input BlogFilterInput {
  author: MembersFilterInput
  body: StringQueryOperatorInput
  canonicalUrl: StringQueryOperatorInput
  categories: StringQueryOperatorInput
  children: NodeFilterListInput
  comments: BooleanQueryOperatorInput
  date: DateQueryOperatorInput
  excerpt: StringQueryOperatorInput
  extract: StringQueryOperatorInput
  frontmatter: BlogFrontmatterFilterInput
  hidden: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  image: FileFilterInput
  internal: InternalFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  meaningfullyUpdatedAt: DateQueryOperatorInput
  modified: DateQueryOperatorInput
  parent: NodeFilterInput
  published: BooleanQueryOperatorInput
  secondAuthor: MembersFilterInput
  tags: StringQueryOperatorInput
  thirdAuthor: MembersFilterInput
  title: StringQueryOperatorInput
}

input BlogFilterListInput {
  elemMatch: BlogFilterInput
}

input BlogFrontmatterFieldSelector {
  author: MembersFieldSelector
  canonicalUrl: FieldSelectorEnum
  categories: FieldSelectorEnum
  comments: FieldSelectorEnum
  date: FieldSelectorEnum
  excerpt: FieldSelectorEnum
  extract: FieldSelectorEnum
  hidden: FieldSelectorEnum
  image: FileFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  meaningfullyUpdatedAt: FieldSelectorEnum
  modified: FieldSelectorEnum
  published: FieldSelectorEnum
  secondAuthor: MembersFieldSelector
  tags: FieldSelectorEnum
  thirdAuthor: MembersFieldSelector
  title: FieldSelectorEnum
}

input BlogFrontmatterFilterInput {
  author: MembersFilterInput
  canonicalUrl: StringQueryOperatorInput
  categories: StringQueryOperatorInput
  comments: BooleanQueryOperatorInput
  date: DateQueryOperatorInput
  excerpt: StringQueryOperatorInput
  extract: StringQueryOperatorInput
  hidden: BooleanQueryOperatorInput
  image: FileFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  meaningfullyUpdatedAt: DateQueryOperatorInput
  modified: DateQueryOperatorInput
  published: BooleanQueryOperatorInput
  secondAuthor: MembersFilterInput
  tags: StringQueryOperatorInput
  thirdAuthor: MembersFilterInput
  title: StringQueryOperatorInput
}

input BlogFrontmatterSortInput {
  author: MembersSortInput
  canonicalUrl: SortOrderEnum
  categories: SortOrderEnum
  comments: SortOrderEnum
  date: SortOrderEnum
  excerpt: SortOrderEnum
  extract: SortOrderEnum
  hidden: SortOrderEnum
  image: FileSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  meaningfullyUpdatedAt: SortOrderEnum
  modified: SortOrderEnum
  published: SortOrderEnum
  secondAuthor: MembersSortInput
  tags: SortOrderEnum
  thirdAuthor: MembersSortInput
  title: SortOrderEnum
}

input BlogSortInput {
  author: MembersSortInput
  body: SortOrderEnum
  canonicalUrl: SortOrderEnum
  categories: SortOrderEnum
  children: NodeSortInput
  comments: SortOrderEnum
  date: SortOrderEnum
  excerpt: SortOrderEnum
  extract: SortOrderEnum
  frontmatter: BlogFrontmatterSortInput
  hidden: SortOrderEnum
  id: SortOrderEnum
  image: FileSortInput
  internal: InternalSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  meaningfullyUpdatedAt: SortOrderEnum
  modified: SortOrderEnum
  parent: NodeSortInput
  published: SortOrderEnum
  secondAuthor: MembersSortInput
  tags: SortOrderEnum
  thirdAuthor: MembersSortInput
  title: SortOrderEnum
}

input BlurredOptions {
  "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
  toFormat: ImageFormat
  "Width of the generated low-res preview. Default is 20px"
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input DirectoryFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  children: NodeFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input DirectorySortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  changeTime: SortOrderEnum
  children: NodeSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

input FaqsFieldSelector {
  answer: FieldSelectorEnum
  body: FieldSelectorEnum
  children: NodeFieldSelector
  faqs_id: FieldSelectorEnum
  frontmatter: FaqsFrontmatterFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  name: FieldSelectorEnum
  order: FieldSelectorEnum
  parent: NodeFieldSelector
  published: FieldSelectorEnum
  question: FieldSelectorEnum
  show_on_career: FieldSelectorEnum
  slug: FieldSelectorEnum
}

input FaqsFilterInput {
  answer: StringQueryOperatorInput
  body: StringQueryOperatorInput
  children: NodeFilterListInput
  faqs_id: StringQueryOperatorInput
  frontmatter: FaqsFrontmatterFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  name: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  parent: NodeFilterInput
  published: BooleanQueryOperatorInput
  question: StringQueryOperatorInput
  show_on_career: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
}

input FaqsFilterListInput {
  elemMatch: FaqsFilterInput
}

input FaqsFrontmatterFieldSelector {
  answer: FieldSelectorEnum
  faqs_id: FieldSelectorEnum
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  name: FieldSelectorEnum
  order: FieldSelectorEnum
  published: FieldSelectorEnum
  question: FieldSelectorEnum
  show_on_career: FieldSelectorEnum
  slug: FieldSelectorEnum
}

input FaqsFrontmatterFilterInput {
  answer: StringQueryOperatorInput
  faqs_id: StringQueryOperatorInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  name: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  published: BooleanQueryOperatorInput
  question: StringQueryOperatorInput
  show_on_career: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
}

input FaqsFrontmatterSortInput {
  answer: SortOrderEnum
  faqs_id: SortOrderEnum
  language: SortOrderEnum
  layout: SortOrderEnum
  name: SortOrderEnum
  order: SortOrderEnum
  published: SortOrderEnum
  question: SortOrderEnum
  show_on_career: SortOrderEnum
  slug: SortOrderEnum
}

input FaqsSortInput {
  answer: SortOrderEnum
  body: SortOrderEnum
  children: NodeSortInput
  faqs_id: SortOrderEnum
  frontmatter: FaqsFrontmatterSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  name: SortOrderEnum
  order: SortOrderEnum
  parent: NodeSortInput
  published: SortOrderEnum
  question: SortOrderEnum
  show_on_career: SortOrderEnum
  slug: SortOrderEnum
}

input FileFieldSelector {
  absolutePath: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  atime: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  base: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  childImageSharp: ImageSharpFieldSelector
  childMdx: MdxFieldSelector
  children: NodeFieldSelector
  childrenImageSharp: ImageSharpFieldSelector
  childrenMdx: MdxFieldSelector
  ctime: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  dev: FieldSelectorEnum
  dir: FieldSelectorEnum
  ext: FieldSelectorEnum
  extension: FieldSelectorEnum
  gid: FieldSelectorEnum
  id: FieldSelectorEnum
  ino: FieldSelectorEnum
  internal: InternalFieldSelector
  mode: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  name: FieldSelectorEnum
  nlink: FieldSelectorEnum
  parent: NodeFieldSelector
  prettySize: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  rdev: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  root: FieldSelectorEnum
  size: FieldSelectorEnum
  sourceInstanceName: FieldSelectorEnum
  uid: FieldSelectorEnum
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  childMdx: MdxFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  childrenMdx: MdxFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input FileSortInput {
  absolutePath: SortOrderEnum
  accessTime: SortOrderEnum
  atime: SortOrderEnum
  atimeMs: SortOrderEnum
  base: SortOrderEnum
  birthTime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  changeTime: SortOrderEnum
  childImageSharp: ImageSharpSortInput
  childMdx: MdxSortInput
  children: NodeSortInput
  childrenImageSharp: ImageSharpSortInput
  childrenMdx: MdxSortInput
  ctime: SortOrderEnum
  ctimeMs: SortOrderEnum
  dev: SortOrderEnum
  dir: SortOrderEnum
  ext: SortOrderEnum
  extension: SortOrderEnum
  gid: SortOrderEnum
  id: SortOrderEnum
  ino: SortOrderEnum
  internal: InternalSortInput
  mode: SortOrderEnum
  modifiedTime: SortOrderEnum
  mtime: SortOrderEnum
  mtimeMs: SortOrderEnum
  name: SortOrderEnum
  nlink: SortOrderEnum
  parent: NodeSortInput
  prettySize: SortOrderEnum
  publicURL: SortOrderEnum
  rdev: SortOrderEnum
  relativeDirectory: SortOrderEnum
  relativePath: SortOrderEnum
  root: SortOrderEnum
  size: SortOrderEnum
  sourceInstanceName: SortOrderEnum
  uid: SortOrderEnum
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  in: [GatsbyImageData]
  ne: GatsbyImageData
  nin: [GatsbyImageData]
}

input ImageSharpFieldSelector {
  children: NodeFieldSelector
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  original: ImageSharpOriginalFieldSelector
  parent: NodeFieldSelector
  resize: ImageSharpResizeFieldSelector
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpFixedSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpFluidFieldSelector {
  aspectRatio: FieldSelectorEnum
  base64: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  sizes: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpFluidSortInput {
  aspectRatio: SortOrderEnum
  base64: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationHeight: SortOrderEnum
  presentationWidth: SortOrderEnum
  sizes: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcSetWebp: SortOrderEnum
  srcWebp: SortOrderEnum
  tracedSVG: SortOrderEnum
}

input ImageSharpOriginalFieldSelector {
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpOriginalSortInput {
  height: SortOrderEnum
  src: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpResizeFieldSelector {
  aspectRatio: FieldSelectorEnum
  height: FieldSelectorEnum
  originalName: FieldSelectorEnum
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpResizeSortInput {
  aspectRatio: SortOrderEnum
  height: SortOrderEnum
  originalName: SortOrderEnum
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
}

input ImageSharpSortInput {
  children: NodeSortInput
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  original: ImageSharpOriginalSortInput
  parent: NodeSortInput
  resize: ImageSharpResizeSortInput
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  contentFilePath: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

input JobsFieldSelector {
  Show_recruiter_info: FieldSelectorEnum
  body: FieldSelectorEnum
  button: FieldSelectorEnum
  button_instagram: FieldSelectorEnum
  button_linkedin: FieldSelectorEnum
  children: NodeFieldSelector
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  frontmatter: JobsFrontmatterFieldSelector
  hidden: FieldSelectorEnum
  hours: FieldSelectorEnum
  id: FieldSelectorEnum
  image_alt_job: FieldSelectorEnum
  image_alt_recruiter_info: FieldSelectorEnum
  image_recruiter_info: FileFieldSelector
  imagejob: FileFieldSelector
  internal: InternalFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  links_more_about_us: FieldSelectorEnum
  name_recruiter: FieldSelectorEnum
  order: FieldSelectorEnum
  parent: NodeFieldSelector
  published: FieldSelectorEnum
  recruting_image2_title: FieldSelectorEnum
  recruting_image3_title: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  salary: FieldSelectorEnum
  salary_max: FieldSelectorEnum
  salary_min: FieldSelectorEnum
  show_new_title_more_about_us: FieldSelectorEnum
  show_recruiter_info: FieldSelectorEnum
  subtitle: FieldSelectorEnum
  technology: FieldSelectorEnum
  title: FieldSelectorEnum
  title_more_about_us: FieldSelectorEnum
  title_recruiter_info: FieldSelectorEnum
  working_time: FieldSelectorEnum
  workplace_recruiter: FieldSelectorEnum
}

input JobsFilterInput {
  Show_recruiter_info: BooleanQueryOperatorInput
  body: StringQueryOperatorInput
  button: StringQueryOperatorInput
  button_instagram: StringQueryOperatorInput
  button_linkedin: StringQueryOperatorInput
  children: NodeFilterListInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  frontmatter: JobsFrontmatterFilterInput
  hidden: BooleanQueryOperatorInput
  hours: StringQueryOperatorInput
  id: StringQueryOperatorInput
  image_alt_job: StringQueryOperatorInput
  image_alt_recruiter_info: StringQueryOperatorInput
  image_recruiter_info: FileFilterInput
  imagejob: FileFilterInput
  internal: InternalFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  links_more_about_us: StringQueryOperatorInput
  name_recruiter: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  parent: NodeFilterInput
  published: BooleanQueryOperatorInput
  recruting_image2_title: StringQueryOperatorInput
  recruting_image3_title: StringQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  salary: StringQueryOperatorInput
  salary_max: FloatQueryOperatorInput
  salary_min: FloatQueryOperatorInput
  show_new_title_more_about_us: BooleanQueryOperatorInput
  show_recruiter_info: BooleanQueryOperatorInput
  subtitle: StringQueryOperatorInput
  technology: StringQueryOperatorInput
  title: StringQueryOperatorInput
  title_more_about_us: StringQueryOperatorInput
  title_recruiter_info: StringQueryOperatorInput
  working_time: StringQueryOperatorInput
  workplace_recruiter: StringQueryOperatorInput
}

input JobsFilterListInput {
  elemMatch: JobsFilterInput
}

input JobsFrontmatterFieldSelector {
  Show_recruiter_info: FieldSelectorEnum
  button: FieldSelectorEnum
  button_instagram: FieldSelectorEnum
  button_linkedin: FieldSelectorEnum
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  hidden: FieldSelectorEnum
  hours: FieldSelectorEnum
  image_alt_job: FieldSelectorEnum
  image_alt_recruiter_info: FieldSelectorEnum
  image_recruiter_info: FileFieldSelector
  imagejob: FileFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  links_more_about_us: FieldSelectorEnum
  name_recruiter: FieldSelectorEnum
  order: FieldSelectorEnum
  published: FieldSelectorEnum
  recruting_image2_title: FieldSelectorEnum
  recruting_image3_title: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  salary: FieldSelectorEnum
  salary_max: FieldSelectorEnum
  salary_min: FieldSelectorEnum
  show_new_title_more_about_us: FieldSelectorEnum
  show_recruiter_info: FieldSelectorEnum
  subtitle: FieldSelectorEnum
  technology: FieldSelectorEnum
  title: FieldSelectorEnum
  title_more_about_us: FieldSelectorEnum
  title_recruiter_info: FieldSelectorEnum
  working_time: FieldSelectorEnum
  workplace_recruiter: FieldSelectorEnum
}

input JobsFrontmatterFilterInput {
  Show_recruiter_info: BooleanQueryOperatorInput
  button: StringQueryOperatorInput
  button_instagram: StringQueryOperatorInput
  button_linkedin: StringQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  hidden: BooleanQueryOperatorInput
  hours: StringQueryOperatorInput
  image_alt_job: StringQueryOperatorInput
  image_alt_recruiter_info: StringQueryOperatorInput
  image_recruiter_info: FileFilterInput
  imagejob: FileFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  links_more_about_us: StringQueryOperatorInput
  name_recruiter: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  published: BooleanQueryOperatorInput
  recruting_image2_title: StringQueryOperatorInput
  recruting_image3_title: StringQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  salary: StringQueryOperatorInput
  salary_max: FloatQueryOperatorInput
  salary_min: FloatQueryOperatorInput
  show_new_title_more_about_us: BooleanQueryOperatorInput
  show_recruiter_info: BooleanQueryOperatorInput
  subtitle: StringQueryOperatorInput
  technology: StringQueryOperatorInput
  title: StringQueryOperatorInput
  title_more_about_us: StringQueryOperatorInput
  title_recruiter_info: StringQueryOperatorInput
  working_time: StringQueryOperatorInput
  workplace_recruiter: StringQueryOperatorInput
}

input JobsFrontmatterSortInput {
  Show_recruiter_info: SortOrderEnum
  button: SortOrderEnum
  button_instagram: SortOrderEnum
  button_linkedin: SortOrderEnum
  date: SortOrderEnum
  description: SortOrderEnum
  hidden: SortOrderEnum
  hours: SortOrderEnum
  image_alt_job: SortOrderEnum
  image_alt_recruiter_info: SortOrderEnum
  image_recruiter_info: FileSortInput
  imagejob: FileSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  links_more_about_us: SortOrderEnum
  name_recruiter: SortOrderEnum
  order: SortOrderEnum
  published: SortOrderEnum
  recruting_image2_title: SortOrderEnum
  recruting_image3_title: SortOrderEnum
  redirect_from: SortOrderEnum
  salary: SortOrderEnum
  salary_max: SortOrderEnum
  salary_min: SortOrderEnum
  show_new_title_more_about_us: SortOrderEnum
  show_recruiter_info: SortOrderEnum
  subtitle: SortOrderEnum
  technology: SortOrderEnum
  title: SortOrderEnum
  title_more_about_us: SortOrderEnum
  title_recruiter_info: SortOrderEnum
  working_time: SortOrderEnum
  workplace_recruiter: SortOrderEnum
}

input JobsSortInput {
  Show_recruiter_info: SortOrderEnum
  body: SortOrderEnum
  button: SortOrderEnum
  button_instagram: SortOrderEnum
  button_linkedin: SortOrderEnum
  children: NodeSortInput
  date: SortOrderEnum
  description: SortOrderEnum
  frontmatter: JobsFrontmatterSortInput
  hidden: SortOrderEnum
  hours: SortOrderEnum
  id: SortOrderEnum
  image_alt_job: SortOrderEnum
  image_alt_recruiter_info: SortOrderEnum
  image_recruiter_info: FileSortInput
  imagejob: FileSortInput
  internal: InternalSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  links_more_about_us: SortOrderEnum
  name_recruiter: SortOrderEnum
  order: SortOrderEnum
  parent: NodeSortInput
  published: SortOrderEnum
  recruting_image2_title: SortOrderEnum
  recruting_image3_title: SortOrderEnum
  redirect_from: SortOrderEnum
  salary: SortOrderEnum
  salary_max: SortOrderEnum
  salary_min: SortOrderEnum
  show_new_title_more_about_us: SortOrderEnum
  show_recruiter_info: SortOrderEnum
  subtitle: SortOrderEnum
  technology: SortOrderEnum
  title: SortOrderEnum
  title_more_about_us: SortOrderEnum
  title_recruiter_info: SortOrderEnum
  working_time: SortOrderEnum
  workplace_recruiter: SortOrderEnum
}

input MdxFieldSelector {
  body: FieldSelectorEnum
  childBlog: BlogFieldSelector
  childFaqs: FaqsFieldSelector
  childJobs: JobsFieldSelector
  childMembers: MembersFieldSelector
  childOurAreas: OurAreasFieldSelector
  childProjects: ProjectsFieldSelector
  children: NodeFieldSelector
  childrenBlog: BlogFieldSelector
  childrenFaqs: FaqsFieldSelector
  childrenJobs: JobsFieldSelector
  childrenMembers: MembersFieldSelector
  childrenOurAreas: OurAreasFieldSelector
  childrenProjects: ProjectsFieldSelector
  excerpt: FieldSelectorEnum
  fields: MdxFieldsFieldSelector
  frontmatter: MdxFrontmatterFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
  tableOfContents: FieldSelectorEnum
}

input MdxFieldsFieldSelector {
  modifiedAt: FieldSelectorEnum
  slug: FieldSelectorEnum
  timeToRead: MdxFieldsTimeToReadFieldSelector
}

input MdxFieldsFilterInput {
  modifiedAt: DateQueryOperatorInput
  slug: StringQueryOperatorInput
  timeToRead: MdxFieldsTimeToReadFilterInput
}

input MdxFieldsSortInput {
  modifiedAt: SortOrderEnum
  slug: SortOrderEnum
  timeToRead: MdxFieldsTimeToReadSortInput
}

input MdxFieldsTimeToReadFieldSelector {
  minutes: FieldSelectorEnum
  text: FieldSelectorEnum
  time: FieldSelectorEnum
  words: FieldSelectorEnum
}

input MdxFieldsTimeToReadFilterInput {
  minutes: FloatQueryOperatorInput
  text: StringQueryOperatorInput
  time: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

input MdxFieldsTimeToReadSortInput {
  minutes: SortOrderEnum
  text: SortOrderEnum
  time: SortOrderEnum
  words: SortOrderEnum
}

input MdxFilterInput {
  body: StringQueryOperatorInput
  childBlog: BlogFilterInput
  childFaqs: FaqsFilterInput
  childJobs: JobsFilterInput
  childMembers: MembersFilterInput
  childOurAreas: OurAreasFilterInput
  childProjects: ProjectsFilterInput
  children: NodeFilterListInput
  childrenBlog: BlogFilterListInput
  childrenFaqs: FaqsFilterListInput
  childrenJobs: JobsFilterListInput
  childrenMembers: MembersFilterListInput
  childrenOurAreas: OurAreasFilterListInput
  childrenProjects: ProjectsFilterListInput
  excerpt: StringQueryOperatorInput
  fields: MdxFieldsFilterInput
  frontmatter: MdxFrontmatterFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  tableOfContents: JSONQueryOperatorInput
}

input MdxFilterListInput {
  elemMatch: MdxFilterInput
}

input MdxFrontmatterBar_achievementsFieldSelector {
  label: FieldSelectorEnum
  number: FieldSelectorEnum
}

input MdxFrontmatterBar_achievementsFilterInput {
  label: StringQueryOperatorInput
  number: StringQueryOperatorInput
}

input MdxFrontmatterBar_achievementsFilterListInput {
  elemMatch: MdxFrontmatterBar_achievementsFilterInput
}

input MdxFrontmatterBar_achievementsSortInput {
  label: SortOrderEnum
  number: SortOrderEnum
}

input MdxFrontmatterFieldSelector {
  Hero_Image_alt: FieldSelectorEnum
  Show_recruiter_info: FieldSelectorEnum
  answer: SimpleMdxFieldSelector
  author: FieldSelectorEnum
  author_id: FieldSelectorEnum
  avatar: FileFieldSelector
  avatar_hover: FileFieldSelector
  bar_achievements: MdxFrontmatterBar_achievementsFieldSelector
  bar_stack: FieldSelectorEnum
  bio: FieldSelectorEnum
  bullet_points: FieldSelectorEnum
  button: FieldSelectorEnum
  button2: FieldSelectorEnum
  button_instagram: FieldSelectorEnum
  button_linkedin: FieldSelectorEnum
  canonicalUrl: FieldSelectorEnum
  categories: FieldSelectorEnum
  comments: FieldSelectorEnum
  date: FieldSelectorEnum
  description: FieldSelectorEnum
  description_contact: FieldSelectorEnum
  description_mdx: SimpleMdxFieldSelector
  descrption: FieldSelectorEnum
  email: FieldSelectorEnum
  ex: FieldSelectorEnum
  excerpt: FieldSelectorEnum
  extract: FieldSelectorEnum
  faqs: MdxFieldSelector
  faqs_id: FieldSelectorEnum
  github: FieldSelectorEnum
  hero_image: FileFieldSelector
  hero_image_alt: FieldSelectorEnum
  hidden: FieldSelectorEnum
  highlighted_word: FieldSelectorEnum
  hobby: FieldSelectorEnum
  hours: FieldSelectorEnum
  image: FileFieldSelector
  image_alt_job: FieldSelectorEnum
  image_alt_our_service: FieldSelectorEnum
  image_alt_our_service_desktop: FieldSelectorEnum
  image_alt_our_service_mobile: FieldSelectorEnum
  image_alt_recruiter_info: FieldSelectorEnum
  image_our_service: FileFieldSelector
  image_our_service_desktop: FileFieldSelector
  image_our_service_mobile: FileFieldSelector
  image_recruiter_info: FileFieldSelector
  imagejob: FileFieldSelector
  intro: FieldSelectorEnum
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  links_more_about_us: SimpleMdxFieldSelector
  meaningfullyUpdatedAt: FieldSelectorEnum
  meta_description: FieldSelectorEnum
  meta_title: FieldSelectorEnum
  modified: FieldSelectorEnum
  name: FieldSelectorEnum
  name_recruiter: FieldSelectorEnum
  order: FieldSelectorEnum
  our_service: MdxFieldSelector
  our_service_id: FieldSelectorEnum
  our_services_icon: FileFieldSelector
  project: MdxFieldSelector
  project_id: FieldSelectorEnum
  published: FieldSelectorEnum
  question: FieldSelectorEnum
  recruting_image2_title: FieldSelectorEnum
  recruting_image3_title: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  salary: FieldSelectorEnum
  salary_min: FieldSelectorEnum
  secondAuthor: FieldSelectorEnum
  short_description: FieldSelectorEnum
  short_name: FieldSelectorEnum
  show_case_study: FieldSelectorEnum
  show_new_title_more_about_us: FieldSelectorEnum
  show_on_career: FieldSelectorEnum
  show_on_homepage: FieldSelectorEnum
  show_recruiter_info: FieldSelectorEnum
  show_team: FieldSelectorEnum
  show_technology_stack: FieldSelectorEnum
  slug: FieldSelectorEnum
  social_media_previev: FileFieldSelector
  social_media_previev_alt: FieldSelectorEnum
  stackoverflow: FieldSelectorEnum
  subtitle: FieldSelectorEnum
  tags: FieldSelectorEnum
  team_members: FieldSelectorEnum
  technology: FieldSelectorEnum
  thirdAuthor: FieldSelectorEnum
  title: FieldSelectorEnum
  title_case_study: FieldSelectorEnum
  title_contact: FieldSelectorEnum
  title_faqs: FieldSelectorEnum
  title_more_about_us: FieldSelectorEnum
  title_recruiter_info: FieldSelectorEnum
  title_team: FieldSelectorEnum
  twitter: FieldSelectorEnum
  web: FieldSelectorEnum
  working_time: FieldSelectorEnum
  workplace_recruiter: FieldSelectorEnum
}

input MdxFrontmatterFilterInput {
  Hero_Image_alt: StringQueryOperatorInput
  Show_recruiter_info: BooleanQueryOperatorInput
  answer: SimpleMdxFilterInput
  author: StringQueryOperatorInput
  author_id: StringQueryOperatorInput
  avatar: FileFilterInput
  avatar_hover: FileFilterInput
  bar_achievements: MdxFrontmatterBar_achievementsFilterListInput
  bar_stack: StringQueryOperatorInput
  bio: StringQueryOperatorInput
  bullet_points: StringQueryOperatorInput
  button: StringQueryOperatorInput
  button2: StringQueryOperatorInput
  button_instagram: StringQueryOperatorInput
  button_linkedin: StringQueryOperatorInput
  canonicalUrl: StringQueryOperatorInput
  categories: StringQueryOperatorInput
  comments: BooleanQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  description_contact: StringQueryOperatorInput
  description_mdx: SimpleMdxFilterInput
  descrption: StringQueryOperatorInput
  email: StringQueryOperatorInput
  ex: BooleanQueryOperatorInput
  excerpt: StringQueryOperatorInput
  extract: StringQueryOperatorInput
  faqs: MdxFilterListInput
  faqs_id: StringQueryOperatorInput
  github: StringQueryOperatorInput
  hero_image: FileFilterInput
  hero_image_alt: StringQueryOperatorInput
  hidden: BooleanQueryOperatorInput
  highlighted_word: StringQueryOperatorInput
  hobby: StringQueryOperatorInput
  hours: StringQueryOperatorInput
  image: FileFilterInput
  image_alt_job: StringQueryOperatorInput
  image_alt_our_service: StringQueryOperatorInput
  image_alt_our_service_desktop: StringQueryOperatorInput
  image_alt_our_service_mobile: StringQueryOperatorInput
  image_alt_recruiter_info: StringQueryOperatorInput
  image_our_service: FileFilterInput
  image_our_service_desktop: FileFilterInput
  image_our_service_mobile: FileFilterInput
  image_recruiter_info: FileFilterInput
  imagejob: FileFilterInput
  intro: StringQueryOperatorInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  links_more_about_us: SimpleMdxFilterInput
  meaningfullyUpdatedAt: DateQueryOperatorInput
  meta_description: StringQueryOperatorInput
  meta_title: StringQueryOperatorInput
  modified: DateQueryOperatorInput
  name: StringQueryOperatorInput
  name_recruiter: StringQueryOperatorInput
  order: IntQueryOperatorInput
  our_service: MdxFilterListInput
  our_service_id: StringQueryOperatorInput
  our_services_icon: FileFilterInput
  project: MdxFilterListInput
  project_id: StringQueryOperatorInput
  published: BooleanQueryOperatorInput
  question: StringQueryOperatorInput
  recruting_image2_title: StringQueryOperatorInput
  recruting_image3_title: StringQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  salary: StringQueryOperatorInput
  salary_min: IntQueryOperatorInput
  secondAuthor: StringQueryOperatorInput
  short_description: StringQueryOperatorInput
  short_name: StringQueryOperatorInput
  show_case_study: BooleanQueryOperatorInput
  show_new_title_more_about_us: BooleanQueryOperatorInput
  show_on_career: BooleanQueryOperatorInput
  show_on_homepage: BooleanQueryOperatorInput
  show_recruiter_info: BooleanQueryOperatorInput
  show_team: BooleanQueryOperatorInput
  show_technology_stack: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  social_media_previev: FileFilterInput
  social_media_previev_alt: StringQueryOperatorInput
  stackoverflow: StringQueryOperatorInput
  subtitle: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  team_members: StringQueryOperatorInput
  technology: StringQueryOperatorInput
  thirdAuthor: StringQueryOperatorInput
  title: StringQueryOperatorInput
  title_case_study: StringQueryOperatorInput
  title_contact: StringQueryOperatorInput
  title_faqs: StringQueryOperatorInput
  title_more_about_us: StringQueryOperatorInput
  title_recruiter_info: StringQueryOperatorInput
  title_team: StringQueryOperatorInput
  twitter: StringQueryOperatorInput
  web: StringQueryOperatorInput
  working_time: StringQueryOperatorInput
  workplace_recruiter: StringQueryOperatorInput
}

input MdxFrontmatterSortInput {
  Hero_Image_alt: SortOrderEnum
  Show_recruiter_info: SortOrderEnum
  answer: SimpleMdxSortInput
  author: SortOrderEnum
  author_id: SortOrderEnum
  avatar: FileSortInput
  avatar_hover: FileSortInput
  bar_achievements: MdxFrontmatterBar_achievementsSortInput
  bar_stack: SortOrderEnum
  bio: SortOrderEnum
  bullet_points: SortOrderEnum
  button: SortOrderEnum
  button2: SortOrderEnum
  button_instagram: SortOrderEnum
  button_linkedin: SortOrderEnum
  canonicalUrl: SortOrderEnum
  categories: SortOrderEnum
  comments: SortOrderEnum
  date: SortOrderEnum
  description: SortOrderEnum
  description_contact: SortOrderEnum
  description_mdx: SimpleMdxSortInput
  descrption: SortOrderEnum
  email: SortOrderEnum
  ex: SortOrderEnum
  excerpt: SortOrderEnum
  extract: SortOrderEnum
  faqs: MdxSortInput
  faqs_id: SortOrderEnum
  github: SortOrderEnum
  hero_image: FileSortInput
  hero_image_alt: SortOrderEnum
  hidden: SortOrderEnum
  highlighted_word: SortOrderEnum
  hobby: SortOrderEnum
  hours: SortOrderEnum
  image: FileSortInput
  image_alt_job: SortOrderEnum
  image_alt_our_service: SortOrderEnum
  image_alt_our_service_desktop: SortOrderEnum
  image_alt_our_service_mobile: SortOrderEnum
  image_alt_recruiter_info: SortOrderEnum
  image_our_service: FileSortInput
  image_our_service_desktop: FileSortInput
  image_our_service_mobile: FileSortInput
  image_recruiter_info: FileSortInput
  imagejob: FileSortInput
  intro: SortOrderEnum
  language: SortOrderEnum
  layout: SortOrderEnum
  links_more_about_us: SimpleMdxSortInput
  meaningfullyUpdatedAt: SortOrderEnum
  meta_description: SortOrderEnum
  meta_title: SortOrderEnum
  modified: SortOrderEnum
  name: SortOrderEnum
  name_recruiter: SortOrderEnum
  order: SortOrderEnum
  our_service: MdxSortInput
  our_service_id: SortOrderEnum
  our_services_icon: FileSortInput
  project: MdxSortInput
  project_id: SortOrderEnum
  published: SortOrderEnum
  question: SortOrderEnum
  recruting_image2_title: SortOrderEnum
  recruting_image3_title: SortOrderEnum
  redirect_from: SortOrderEnum
  salary: SortOrderEnum
  salary_min: SortOrderEnum
  secondAuthor: SortOrderEnum
  short_description: SortOrderEnum
  short_name: SortOrderEnum
  show_case_study: SortOrderEnum
  show_new_title_more_about_us: SortOrderEnum
  show_on_career: SortOrderEnum
  show_on_homepage: SortOrderEnum
  show_recruiter_info: SortOrderEnum
  show_team: SortOrderEnum
  show_technology_stack: SortOrderEnum
  slug: SortOrderEnum
  social_media_previev: FileSortInput
  social_media_previev_alt: SortOrderEnum
  stackoverflow: SortOrderEnum
  subtitle: SortOrderEnum
  tags: SortOrderEnum
  team_members: SortOrderEnum
  technology: SortOrderEnum
  thirdAuthor: SortOrderEnum
  title: SortOrderEnum
  title_case_study: SortOrderEnum
  title_contact: SortOrderEnum
  title_faqs: SortOrderEnum
  title_more_about_us: SortOrderEnum
  title_recruiter_info: SortOrderEnum
  title_team: SortOrderEnum
  twitter: SortOrderEnum
  web: SortOrderEnum
  working_time: SortOrderEnum
  workplace_recruiter: SortOrderEnum
}

input MdxSortInput {
  body: SortOrderEnum
  childBlog: BlogSortInput
  childFaqs: FaqsSortInput
  childJobs: JobsSortInput
  childMembers: MembersSortInput
  childOurAreas: OurAreasSortInput
  childProjects: ProjectsSortInput
  children: NodeSortInput
  childrenBlog: BlogSortInput
  childrenFaqs: FaqsSortInput
  childrenJobs: JobsSortInput
  childrenMembers: MembersSortInput
  childrenOurAreas: OurAreasSortInput
  childrenProjects: ProjectsSortInput
  excerpt: SortOrderEnum
  fields: MdxFieldsSortInput
  frontmatter: MdxFrontmatterSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
  tableOfContents: SortOrderEnum
}

input MembersFieldSelector {
  author_id: FieldSelectorEnum
  avatar: FileFieldSelector
  avatar_hover: FileFieldSelector
  bio: FieldSelectorEnum
  body: FieldSelectorEnum
  children: NodeFieldSelector
  crosspost: FieldSelectorEnum
  description: FieldSelectorEnum
  descrption: FieldSelectorEnum
  email: FieldSelectorEnum
  ex: FieldSelectorEnum
  frontmatter: MembersFrontmatterFieldSelector
  github: FieldSelectorEnum
  hobby: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  name: FieldSelectorEnum
  parent: NodeFieldSelector
  posts: BlogFieldSelector
  published: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  short_name: FieldSelectorEnum
  slug: FieldSelectorEnum
  stackoverflow: FieldSelectorEnum
  title: FieldSelectorEnum
  twitter: FieldSelectorEnum
  web: FieldSelectorEnum
}

input MembersFilterInput {
  author_id: StringQueryOperatorInput
  avatar: FileFilterInput
  avatar_hover: FileFilterInput
  bio: StringQueryOperatorInput
  body: StringQueryOperatorInput
  children: NodeFilterListInput
  crosspost: StringQueryOperatorInput
  description: StringQueryOperatorInput
  descrption: StringQueryOperatorInput
  email: StringQueryOperatorInput
  ex: BooleanQueryOperatorInput
  frontmatter: MembersFrontmatterFilterInput
  github: StringQueryOperatorInput
  hobby: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  posts: BlogFilterListInput
  published: BooleanQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  short_name: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  stackoverflow: StringQueryOperatorInput
  title: StringQueryOperatorInput
  twitter: StringQueryOperatorInput
  web: StringQueryOperatorInput
}

input MembersFilterListInput {
  elemMatch: MembersFilterInput
}

input MembersFrontmatterFieldSelector {
  author_id: FieldSelectorEnum
  avatar: FileFieldSelector
  avatar_hover: FileFieldSelector
  bio: FieldSelectorEnum
  crosspost: FieldSelectorEnum
  description: FieldSelectorEnum
  descrption: FieldSelectorEnum
  email: FieldSelectorEnum
  ex: FieldSelectorEnum
  github: FieldSelectorEnum
  hobby: FieldSelectorEnum
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  name: FieldSelectorEnum
  published: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  short_name: FieldSelectorEnum
  slug: FieldSelectorEnum
  stackoverflow: FieldSelectorEnum
  title: FieldSelectorEnum
  twitter: FieldSelectorEnum
  web: FieldSelectorEnum
}

input MembersFrontmatterFilterInput {
  author_id: StringQueryOperatorInput
  avatar: FileFilterInput
  avatar_hover: FileFilterInput
  bio: StringQueryOperatorInput
  crosspost: StringQueryOperatorInput
  description: StringQueryOperatorInput
  descrption: StringQueryOperatorInput
  email: StringQueryOperatorInput
  ex: BooleanQueryOperatorInput
  github: StringQueryOperatorInput
  hobby: StringQueryOperatorInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  name: StringQueryOperatorInput
  published: BooleanQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  short_name: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  stackoverflow: StringQueryOperatorInput
  title: StringQueryOperatorInput
  twitter: StringQueryOperatorInput
  web: StringQueryOperatorInput
}

input MembersFrontmatterSortInput {
  author_id: SortOrderEnum
  avatar: FileSortInput
  avatar_hover: FileSortInput
  bio: SortOrderEnum
  crosspost: SortOrderEnum
  description: SortOrderEnum
  descrption: SortOrderEnum
  email: SortOrderEnum
  ex: SortOrderEnum
  github: SortOrderEnum
  hobby: SortOrderEnum
  language: SortOrderEnum
  layout: SortOrderEnum
  name: SortOrderEnum
  published: SortOrderEnum
  redirect_from: SortOrderEnum
  short_name: SortOrderEnum
  slug: SortOrderEnum
  stackoverflow: SortOrderEnum
  title: SortOrderEnum
  twitter: SortOrderEnum
  web: SortOrderEnum
}

input MembersSortInput {
  author_id: SortOrderEnum
  avatar: FileSortInput
  avatar_hover: FileSortInput
  bio: SortOrderEnum
  body: SortOrderEnum
  children: NodeSortInput
  crosspost: SortOrderEnum
  description: SortOrderEnum
  descrption: SortOrderEnum
  email: SortOrderEnum
  ex: SortOrderEnum
  frontmatter: MembersFrontmatterSortInput
  github: SortOrderEnum
  hobby: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  name: SortOrderEnum
  parent: NodeSortInput
  posts: BlogSortInput
  published: SortOrderEnum
  redirect_from: SortOrderEnum
  short_name: SortOrderEnum
  slug: SortOrderEnum
  stackoverflow: SortOrderEnum
  title: SortOrderEnum
  twitter: SortOrderEnum
  web: SortOrderEnum
}

input NodeFieldSelector {
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input NodeSortInput {
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input OurAreasFieldSelector {
  bar_stack: FieldSelectorEnum
  body: FieldSelectorEnum
  bullet_points: FieldSelectorEnum
  button: FieldSelectorEnum
  button2: FieldSelectorEnum
  children: NodeFieldSelector
  description_contact: FieldSelectorEnum
  description_mdx: FieldSelectorEnum
  faqs: FaqsFieldSelector
  frontmatter: OurAreasFrontmatterFieldSelector
  highlighted_word: FieldSelectorEnum
  id: FieldSelectorEnum
  image_alt_our_service: FieldSelectorEnum
  image_alt_our_service_desktop: FieldSelectorEnum
  image_alt_our_service_mobile: FieldSelectorEnum
  image_our_service: FileFieldSelector
  image_our_service_desktop: FileFieldSelector
  image_our_service_mobile: FileFieldSelector
  internal: InternalFieldSelector
  intro: FieldSelectorEnum
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  meta_description: FieldSelectorEnum
  meta_title: FieldSelectorEnum
  name: FieldSelectorEnum
  order: FieldSelectorEnum
  our_service_id: FieldSelectorEnum
  our_services_icon: FileFieldSelector
  parent: NodeFieldSelector
  project: ProjectsFieldSelector
  published: FieldSelectorEnum
  short_description: FieldSelectorEnum
  show_case_study: FieldSelectorEnum
  show_technology_stack: FieldSelectorEnum
  slug: FieldSelectorEnum
  team_members: MembersFieldSelector
  title: FieldSelectorEnum
  title_case_study: FieldSelectorEnum
  title_contact: FieldSelectorEnum
  title_faqs: FieldSelectorEnum
  title_team: FieldSelectorEnum
}

input OurAreasFilterInput {
  bar_stack: StringQueryOperatorInput
  body: StringQueryOperatorInput
  bullet_points: StringQueryOperatorInput
  button: StringQueryOperatorInput
  button2: StringQueryOperatorInput
  children: NodeFilterListInput
  description_contact: StringQueryOperatorInput
  description_mdx: StringQueryOperatorInput
  faqs: FaqsFilterListInput
  frontmatter: OurAreasFrontmatterFilterInput
  highlighted_word: StringQueryOperatorInput
  id: StringQueryOperatorInput
  image_alt_our_service: StringQueryOperatorInput
  image_alt_our_service_desktop: StringQueryOperatorInput
  image_alt_our_service_mobile: StringQueryOperatorInput
  image_our_service: FileFilterInput
  image_our_service_desktop: FileFilterInput
  image_our_service_mobile: FileFilterInput
  internal: InternalFilterInput
  intro: StringQueryOperatorInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  meta_description: StringQueryOperatorInput
  meta_title: StringQueryOperatorInput
  name: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  our_service_id: StringQueryOperatorInput
  our_services_icon: FileFilterInput
  parent: NodeFilterInput
  project: ProjectsFilterListInput
  published: BooleanQueryOperatorInput
  short_description: StringQueryOperatorInput
  show_case_study: BooleanQueryOperatorInput
  show_technology_stack: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  team_members: MembersFilterListInput
  title: StringQueryOperatorInput
  title_case_study: StringQueryOperatorInput
  title_contact: StringQueryOperatorInput
  title_faqs: StringQueryOperatorInput
  title_team: StringQueryOperatorInput
}

input OurAreasFilterListInput {
  elemMatch: OurAreasFilterInput
}

input OurAreasFrontmatterFieldSelector {
  bar_stack: FieldSelectorEnum
  bullet_points: FieldSelectorEnum
  button: FieldSelectorEnum
  button2: FieldSelectorEnum
  description_contact: FieldSelectorEnum
  description_mdx: FieldSelectorEnum
  faqs: FaqsFieldSelector
  highlighted_word: FieldSelectorEnum
  image_alt_our_service: FieldSelectorEnum
  image_alt_our_service_desktop: FieldSelectorEnum
  image_alt_our_service_mobile: FieldSelectorEnum
  image_our_service: FileFieldSelector
  image_our_service_desktop: FileFieldSelector
  image_our_service_mobile: FileFieldSelector
  intro: FieldSelectorEnum
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  meta_description: FieldSelectorEnum
  meta_title: FieldSelectorEnum
  name: FieldSelectorEnum
  order: FieldSelectorEnum
  our_service_id: FieldSelectorEnum
  our_services_icon: FileFieldSelector
  project: ProjectsFieldSelector
  published: FieldSelectorEnum
  short_description: FieldSelectorEnum
  show_case_study: FieldSelectorEnum
  show_technology_stack: FieldSelectorEnum
  slug: FieldSelectorEnum
  team_members: MembersFieldSelector
  title: FieldSelectorEnum
  title_case_study: FieldSelectorEnum
  title_contact: FieldSelectorEnum
  title_faqs: FieldSelectorEnum
  title_team: FieldSelectorEnum
}

input OurAreasFrontmatterFilterInput {
  bar_stack: StringQueryOperatorInput
  bullet_points: StringQueryOperatorInput
  button: StringQueryOperatorInput
  button2: StringQueryOperatorInput
  description_contact: StringQueryOperatorInput
  description_mdx: StringQueryOperatorInput
  faqs: FaqsFilterListInput
  highlighted_word: StringQueryOperatorInput
  image_alt_our_service: StringQueryOperatorInput
  image_alt_our_service_desktop: StringQueryOperatorInput
  image_alt_our_service_mobile: StringQueryOperatorInput
  image_our_service: FileFilterInput
  image_our_service_desktop: FileFilterInput
  image_our_service_mobile: FileFilterInput
  intro: StringQueryOperatorInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  meta_description: StringQueryOperatorInput
  meta_title: StringQueryOperatorInput
  name: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  our_service_id: StringQueryOperatorInput
  our_services_icon: FileFilterInput
  project: ProjectsFilterListInput
  published: BooleanQueryOperatorInput
  short_description: StringQueryOperatorInput
  show_case_study: BooleanQueryOperatorInput
  show_technology_stack: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  team_members: MembersFilterListInput
  title: StringQueryOperatorInput
  title_case_study: StringQueryOperatorInput
  title_contact: StringQueryOperatorInput
  title_faqs: StringQueryOperatorInput
  title_team: StringQueryOperatorInput
}

input OurAreasFrontmatterSortInput {
  bar_stack: SortOrderEnum
  bullet_points: SortOrderEnum
  button: SortOrderEnum
  button2: SortOrderEnum
  description_contact: SortOrderEnum
  description_mdx: SortOrderEnum
  faqs: FaqsSortInput
  highlighted_word: SortOrderEnum
  image_alt_our_service: SortOrderEnum
  image_alt_our_service_desktop: SortOrderEnum
  image_alt_our_service_mobile: SortOrderEnum
  image_our_service: FileSortInput
  image_our_service_desktop: FileSortInput
  image_our_service_mobile: FileSortInput
  intro: SortOrderEnum
  language: SortOrderEnum
  layout: SortOrderEnum
  meta_description: SortOrderEnum
  meta_title: SortOrderEnum
  name: SortOrderEnum
  order: SortOrderEnum
  our_service_id: SortOrderEnum
  our_services_icon: FileSortInput
  project: ProjectsSortInput
  published: SortOrderEnum
  short_description: SortOrderEnum
  show_case_study: SortOrderEnum
  show_technology_stack: SortOrderEnum
  slug: SortOrderEnum
  team_members: MembersSortInput
  title: SortOrderEnum
  title_case_study: SortOrderEnum
  title_contact: SortOrderEnum
  title_faqs: SortOrderEnum
  title_team: SortOrderEnum
}

input OurAreasSortInput {
  bar_stack: SortOrderEnum
  body: SortOrderEnum
  bullet_points: SortOrderEnum
  button: SortOrderEnum
  button2: SortOrderEnum
  children: NodeSortInput
  description_contact: SortOrderEnum
  description_mdx: SortOrderEnum
  faqs: FaqsSortInput
  frontmatter: OurAreasFrontmatterSortInput
  highlighted_word: SortOrderEnum
  id: SortOrderEnum
  image_alt_our_service: SortOrderEnum
  image_alt_our_service_desktop: SortOrderEnum
  image_alt_our_service_mobile: SortOrderEnum
  image_our_service: FileSortInput
  image_our_service_desktop: FileSortInput
  image_our_service_mobile: FileSortInput
  internal: InternalSortInput
  intro: SortOrderEnum
  language: SortOrderEnum
  layout: SortOrderEnum
  meta_description: SortOrderEnum
  meta_title: SortOrderEnum
  name: SortOrderEnum
  order: SortOrderEnum
  our_service_id: SortOrderEnum
  our_services_icon: FileSortInput
  parent: NodeSortInput
  project: ProjectsSortInput
  published: SortOrderEnum
  short_description: SortOrderEnum
  show_case_study: SortOrderEnum
  show_technology_stack: SortOrderEnum
  slug: SortOrderEnum
  team_members: MembersSortInput
  title: SortOrderEnum
  title_case_study: SortOrderEnum
  title_contact: SortOrderEnum
  title_faqs: SortOrderEnum
  title_team: SortOrderEnum
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

input ProjectsFieldSelector {
  Hero_Image_alt: FieldSelectorEnum
  bar_achievements: FieldSelectorEnum
  body: FieldSelectorEnum
  children: NodeFieldSelector
  description: FieldSelectorEnum
  description_contact: FieldSelectorEnum
  frontmatter: ProjectsFrontmatterFieldSelector
  hero_image: FileFieldSelector
  hero_image_alt: FieldSelectorEnum
  id: FieldSelectorEnum
  image: FileFieldSelector
  internal: InternalFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  order: FieldSelectorEnum
  our_service: OurAreasFieldSelector
  parent: NodeFieldSelector
  project_id: FieldSelectorEnum
  published: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  show_case_study: FieldSelectorEnum
  show_on_homepage: FieldSelectorEnum
  show_team: FieldSelectorEnum
  slug: FieldSelectorEnum
  social_media_previev: FileFieldSelector
  social_media_previev_alt: FieldSelectorEnum
  tags: FieldSelectorEnum
  team_members: MembersFieldSelector
  title: FieldSelectorEnum
  title_case_study: FieldSelectorEnum
  title_contact: FieldSelectorEnum
  title_team: FieldSelectorEnum
}

input ProjectsFilterInput {
  Hero_Image_alt: StringQueryOperatorInput
  bar_achievements: StringQueryOperatorInput
  body: StringQueryOperatorInput
  children: NodeFilterListInput
  description: StringQueryOperatorInput
  description_contact: StringQueryOperatorInput
  frontmatter: ProjectsFrontmatterFilterInput
  hero_image: FileFilterInput
  hero_image_alt: StringQueryOperatorInput
  id: StringQueryOperatorInput
  image: FileFilterInput
  internal: InternalFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  our_service: OurAreasFilterListInput
  parent: NodeFilterInput
  project_id: StringQueryOperatorInput
  published: BooleanQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  show_case_study: BooleanQueryOperatorInput
  show_on_homepage: BooleanQueryOperatorInput
  show_team: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  social_media_previev: FileFilterInput
  social_media_previev_alt: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  team_members: MembersFilterListInput
  title: StringQueryOperatorInput
  title_case_study: StringQueryOperatorInput
  title_contact: StringQueryOperatorInput
  title_team: StringQueryOperatorInput
}

input ProjectsFilterListInput {
  elemMatch: ProjectsFilterInput
}

input ProjectsFrontmatterFieldSelector {
  Hero_Image_alt: FieldSelectorEnum
  bar_achievements: FieldSelectorEnum
  description: FieldSelectorEnum
  description_contact: FieldSelectorEnum
  hero_image: FileFieldSelector
  hero_image_alt: FieldSelectorEnum
  image: FileFieldSelector
  language: FieldSelectorEnum
  layout: FieldSelectorEnum
  order: FieldSelectorEnum
  our_service: OurAreasFieldSelector
  project_id: FieldSelectorEnum
  published: FieldSelectorEnum
  redirect_from: FieldSelectorEnum
  show_case_study: FieldSelectorEnum
  show_on_homepage: FieldSelectorEnum
  show_team: FieldSelectorEnum
  slug: FieldSelectorEnum
  social_media_previev: FileFieldSelector
  social_media_previev_alt: FieldSelectorEnum
  tags: FieldSelectorEnum
  team_members: MembersFieldSelector
  title: FieldSelectorEnum
  title_case_study: FieldSelectorEnum
  title_contact: FieldSelectorEnum
  title_team: FieldSelectorEnum
}

input ProjectsFrontmatterFilterInput {
  Hero_Image_alt: StringQueryOperatorInput
  bar_achievements: StringQueryOperatorInput
  description: StringQueryOperatorInput
  description_contact: StringQueryOperatorInput
  hero_image: FileFilterInput
  hero_image_alt: StringQueryOperatorInput
  image: FileFilterInput
  language: StringQueryOperatorInput
  layout: StringQueryOperatorInput
  order: FloatQueryOperatorInput
  our_service: OurAreasFilterListInput
  project_id: StringQueryOperatorInput
  published: BooleanQueryOperatorInput
  redirect_from: StringQueryOperatorInput
  show_case_study: BooleanQueryOperatorInput
  show_on_homepage: BooleanQueryOperatorInput
  show_team: BooleanQueryOperatorInput
  slug: StringQueryOperatorInput
  social_media_previev: FileFilterInput
  social_media_previev_alt: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  team_members: MembersFilterListInput
  title: StringQueryOperatorInput
  title_case_study: StringQueryOperatorInput
  title_contact: StringQueryOperatorInput
  title_team: StringQueryOperatorInput
}

input ProjectsFrontmatterSortInput {
  Hero_Image_alt: SortOrderEnum
  bar_achievements: SortOrderEnum
  description: SortOrderEnum
  description_contact: SortOrderEnum
  hero_image: FileSortInput
  hero_image_alt: SortOrderEnum
  image: FileSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  order: SortOrderEnum
  our_service: OurAreasSortInput
  project_id: SortOrderEnum
  published: SortOrderEnum
  redirect_from: SortOrderEnum
  show_case_study: SortOrderEnum
  show_on_homepage: SortOrderEnum
  show_team: SortOrderEnum
  slug: SortOrderEnum
  social_media_previev: FileSortInput
  social_media_previev_alt: SortOrderEnum
  tags: SortOrderEnum
  team_members: MembersSortInput
  title: SortOrderEnum
  title_case_study: SortOrderEnum
  title_contact: SortOrderEnum
  title_team: SortOrderEnum
}

input ProjectsSortInput {
  Hero_Image_alt: SortOrderEnum
  bar_achievements: SortOrderEnum
  body: SortOrderEnum
  children: NodeSortInput
  description: SortOrderEnum
  description_contact: SortOrderEnum
  frontmatter: ProjectsFrontmatterSortInput
  hero_image: FileSortInput
  hero_image_alt: SortOrderEnum
  id: SortOrderEnum
  image: FileSortInput
  internal: InternalSortInput
  language: SortOrderEnum
  layout: SortOrderEnum
  order: SortOrderEnum
  our_service: OurAreasSortInput
  parent: NodeSortInput
  project_id: SortOrderEnum
  published: SortOrderEnum
  redirect_from: SortOrderEnum
  show_case_study: SortOrderEnum
  show_on_homepage: SortOrderEnum
  show_team: SortOrderEnum
  slug: SortOrderEnum
  social_media_previev: FileSortInput
  social_media_previev_alt: SortOrderEnum
  tags: SortOrderEnum
  team_members: MembersSortInput
  title: SortOrderEnum
  title_case_study: SortOrderEnum
  title_contact: SortOrderEnum
  title_team: SortOrderEnum
}

input SimpleMdxFieldSelector {
  html: FieldSelectorEnum
}

input SimpleMdxFilterInput {
  html: StringQueryOperatorInput
}

input SimpleMdxSortInput {
  html: SortOrderEnum
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  parent: NodeFieldSelector
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  parent: NodeSortInput
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  children: NodeFieldSelector
  flags: SiteFlagsFieldSelector
  graphqlTypegen: SiteGraphqlTypegenFieldSelector
  host: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  jsxRuntime: FieldSelectorEnum
  mapping: SiteMappingFieldSelector
  parent: NodeFieldSelector
  pathPrefix: FieldSelectorEnum
  polyfill: FieldSelectorEnum
  port: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  trailingSlash: FieldSelectorEnum
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  flags: SiteFlagsFilterInput
  graphqlTypegen: SiteGraphqlTypegenFilterInput
  host: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  mapping: SiteMappingFilterInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  port: IntQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

input SiteFlagsFieldSelector {
  DEV_SSR: FieldSelectorEnum
}

input SiteFlagsFilterInput {
  DEV_SSR: BooleanQueryOperatorInput
}

input SiteFlagsSortInput {
  DEV_SSR: SortOrderEnum
}

input SiteFunctionFieldSelector {
  absoluteCompiledFilePath: FieldSelectorEnum
  children: NodeFieldSelector
  functionRoute: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  matchPath: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginName: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
  absoluteCompiledFilePath: SortOrderEnum
  children: NodeSortInput
  functionRoute: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  matchPath: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  parent: NodeSortInput
  pluginName: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
}

input SiteGraphqlTypegenFieldSelector {
  documentSearchPaths: FieldSelectorEnum
  generateOnBuild: FieldSelectorEnum
  typesOutputPath: FieldSelectorEnum
}

input SiteGraphqlTypegenFilterInput {
  documentSearchPaths: StringQueryOperatorInput
  generateOnBuild: BooleanQueryOperatorInput
  typesOutputPath: StringQueryOperatorInput
}

input SiteGraphqlTypegenSortInput {
  documentSearchPaths: SortOrderEnum
  generateOnBuild: SortOrderEnum
  typesOutputPath: SortOrderEnum
}

input SiteMappingFieldSelector {
  Mdx_frontmatter_faqs: FieldSelectorEnum
  Mdx_frontmatter_our_service: FieldSelectorEnum
  Mdx_frontmatter_project: FieldSelectorEnum
}

input SiteMappingFilterInput {
  Mdx_frontmatter_faqs: StringQueryOperatorInput
  Mdx_frontmatter_our_service: StringQueryOperatorInput
  Mdx_frontmatter_project: StringQueryOperatorInput
}

input SiteMappingSortInput {
  Mdx_frontmatter_faqs: SortOrderEnum
  Mdx_frontmatter_our_service: SortOrderEnum
  Mdx_frontmatter_project: SortOrderEnum
}

input SitePageFieldSelector {
  children: NodeFieldSelector
  component: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  internalComponentName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  parent: NodeFieldSelector
  path: FieldSelectorEnum
  pluginCreator: SitePluginFieldSelector
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  pluginCreator: SitePluginFilterInput
}

input SitePageSortInput {
  children: NodeSortInput
  component: SortOrderEnum
  componentChunkName: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  internalComponentName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  parent: NodeSortInput
  path: SortOrderEnum
  pluginCreator: SitePluginSortInput
}

input SitePluginFieldSelector {
  browserAPIs: FieldSelectorEnum
  children: NodeFieldSelector
  id: FieldSelectorEnum
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  nodeAPIs: FieldSelectorEnum
  packageJson: FieldSelectorEnum
  parent: NodeFieldSelector
  pluginFilepath: FieldSelectorEnum
  pluginOptions: FieldSelectorEnum
  resolve: FieldSelectorEnum
  ssrAPIs: FieldSelectorEnum
  version: FieldSelectorEnum
}

input SitePluginFilterInput {
  browserAPIs: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  parent: NodeFilterInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  resolve: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginSortInput {
  browserAPIs: SortOrderEnum
  children: NodeSortInput
  id: SortOrderEnum
  internal: InternalSortInput
  name: SortOrderEnum
  nodeAPIs: SortOrderEnum
  packageJson: SortOrderEnum
  parent: NodeSortInput
  pluginFilepath: SortOrderEnum
  pluginOptions: SortOrderEnum
  resolve: SortOrderEnum
  ssrAPIs: SortOrderEnum
  version: SortOrderEnum
}

input SiteSiteMetadataFieldSelector {
  author: FieldSelectorEnum
  description: FieldSelectorEnum
  disqusShortname: FieldSelectorEnum
  siteUrl: FieldSelectorEnum
  title: FieldSelectorEnum
}

input SiteSiteMetadataFilterInput {
  author: StringQueryOperatorInput
  description: StringQueryOperatorInput
  disqusShortname: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSiteMetadataSortInput {
  author: SortOrderEnum
  description: SortOrderEnum
  disqusShortname: SortOrderEnum
  siteUrl: SortOrderEnum
  title: SortOrderEnum
}

input SiteSortInput {
  buildTime: SortOrderEnum
  children: NodeSortInput
  flags: SiteFlagsSortInput
  graphqlTypegen: SiteGraphqlTypegenSortInput
  host: SortOrderEnum
  id: SortOrderEnum
  internal: InternalSortInput
  jsxRuntime: SortOrderEnum
  mapping: SiteMappingSortInput
  parent: NodeSortInput
  pathPrefix: SortOrderEnum
  polyfill: SortOrderEnum
  port: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  trailingSlash: SortOrderEnum
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0.0
}

input WebPOptions {
  quality: Int
}
