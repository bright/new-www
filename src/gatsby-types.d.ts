/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type Blog = Node & {
  readonly author: Members;
  readonly body: Scalars['String'];
  readonly canonicalUrl: Maybe<Scalars['String']>;
  readonly categories: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly comments: Scalars['Boolean'];
  readonly date: Scalars['Date'];
  readonly excerpt: Maybe<Scalars['String']>;
  readonly extract: Maybe<Scalars['String']>;
  readonly frontmatter: BlogFrontmatter;
  readonly hidden: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  readonly image: Maybe<File>;
  readonly internal: Internal;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly meaningfullyUpdatedAt: Maybe<Scalars['Date']>;
  readonly modified: Maybe<Scalars['Date']>;
  readonly parent: Maybe<Node>;
  readonly published: Scalars['Boolean'];
  readonly secondAuthor: Maybe<Members>;
  readonly slug: Maybe<Scalars['String']>;
  readonly tags: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly thirdAuthor: Maybe<Members>;
  readonly title: Scalars['String'];
};


type Blog_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type BlogConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BlogEdge>;
  readonly group: ReadonlyArray<BlogGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Blog>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BlogConnection_distinctArgs = {
  field: BlogFieldSelector;
};


type BlogConnection_groupArgs = {
  field: BlogFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BlogConnection_maxArgs = {
  field: BlogFieldSelector;
};


type BlogConnection_minArgs = {
  field: BlogFieldSelector;
};


type BlogConnection_sumArgs = {
  field: BlogFieldSelector;
};

type BlogEdge = {
  readonly next: Maybe<Blog>;
  readonly node: Blog;
  readonly previous: Maybe<Blog>;
};

type BlogFieldSelector = {
  readonly author: InputMaybe<MembersFieldSelector>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly canonicalUrl: InputMaybe<FieldSelectorEnum>;
  readonly categories: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly comments: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<BlogFrontmatterFieldSelector>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly meaningfullyUpdatedAt: InputMaybe<FieldSelectorEnum>;
  readonly modified: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly secondAuthor: InputMaybe<MembersFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly thirdAuthor: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type BlogFilterInput = {
  readonly author: InputMaybe<MembersFilterInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  readonly categories: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly comments: InputMaybe<BooleanQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<BlogFrontmatterFilterInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly meaningfullyUpdatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly secondAuthor: InputMaybe<MembersFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly thirdAuthor: InputMaybe<MembersFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type BlogFilterListInput = {
  readonly elemMatch: InputMaybe<BlogFilterInput>;
};

type BlogFrontmatter = {
  readonly author: Members;
  readonly canonicalUrl: Maybe<Scalars['String']>;
  readonly categories: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly comments: Scalars['Boolean'];
  readonly date: Scalars['Date'];
  readonly excerpt: Maybe<Scalars['String']>;
  readonly extract: Maybe<Scalars['String']>;
  readonly hidden: Scalars['Boolean'];
  readonly image: Maybe<File>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly meaningfullyUpdatedAt: Maybe<Scalars['Date']>;
  readonly modified: Maybe<Scalars['Date']>;
  readonly published: Scalars['Boolean'];
  readonly secondAuthor: Maybe<Members>;
  readonly slug: Maybe<Scalars['String']>;
  readonly tags: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly thirdAuthor: Maybe<Members>;
  readonly title: Scalars['String'];
};


type BlogFrontmatter_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type BlogFrontmatterFieldSelector = {
  readonly author: InputMaybe<MembersFieldSelector>;
  readonly canonicalUrl: InputMaybe<FieldSelectorEnum>;
  readonly categories: InputMaybe<FieldSelectorEnum>;
  readonly comments: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly meaningfullyUpdatedAt: InputMaybe<FieldSelectorEnum>;
  readonly modified: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly secondAuthor: InputMaybe<MembersFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly thirdAuthor: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type BlogFrontmatterFilterInput = {
  readonly author: InputMaybe<MembersFilterInput>;
  readonly canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  readonly categories: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<BooleanQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly meaningfullyUpdatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly secondAuthor: InputMaybe<MembersFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly thirdAuthor: InputMaybe<MembersFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type BlogFrontmatterSortInput = {
  readonly author: InputMaybe<MembersSortInput>;
  readonly canonicalUrl: InputMaybe<SortOrderEnum>;
  readonly categories: InputMaybe<SortOrderEnum>;
  readonly comments: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly meaningfullyUpdatedAt: InputMaybe<SortOrderEnum>;
  readonly modified: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly secondAuthor: InputMaybe<MembersSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly thirdAuthor: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type BlogGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BlogEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<BlogGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Blog>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BlogGroupConnection_distinctArgs = {
  field: BlogFieldSelector;
};


type BlogGroupConnection_groupArgs = {
  field: BlogFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BlogGroupConnection_maxArgs = {
  field: BlogFieldSelector;
};


type BlogGroupConnection_minArgs = {
  field: BlogFieldSelector;
};


type BlogGroupConnection_sumArgs = {
  field: BlogFieldSelector;
};

type BlogSortInput = {
  readonly author: InputMaybe<MembersSortInput>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly canonicalUrl: InputMaybe<SortOrderEnum>;
  readonly categories: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly comments: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<BlogFrontmatterSortInput>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly meaningfullyUpdatedAt: InputMaybe<SortOrderEnum>;
  readonly modified: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly secondAuthor: InputMaybe<MembersSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly thirdAuthor: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type Faqs = Node & {
  readonly answer: Scalars['String'];
  readonly body: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly faqs_id: Scalars['String'];
  readonly frontmatter: FaqsFrontmatter;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly name: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly parent: Maybe<Node>;
  readonly published: Scalars['Boolean'];
  readonly question: Scalars['String'];
  readonly show_on_career: Scalars['Boolean'];
  readonly slug: Scalars['String'];
};

type FaqsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FaqsEdge>;
  readonly group: ReadonlyArray<FaqsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Faqs>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FaqsConnection_distinctArgs = {
  field: FaqsFieldSelector;
};


type FaqsConnection_groupArgs = {
  field: FaqsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FaqsConnection_maxArgs = {
  field: FaqsFieldSelector;
};


type FaqsConnection_minArgs = {
  field: FaqsFieldSelector;
};


type FaqsConnection_sumArgs = {
  field: FaqsFieldSelector;
};

type FaqsEdge = {
  readonly next: Maybe<Faqs>;
  readonly node: Faqs;
  readonly previous: Maybe<Faqs>;
};

type FaqsFieldSelector = {
  readonly answer: InputMaybe<FieldSelectorEnum>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly faqs_id: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<FaqsFrontmatterFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly show_on_career: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
};

type FaqsFilterInput = {
  readonly answer: InputMaybe<StringQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly faqs_id: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<FaqsFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly show_on_career: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type FaqsFilterListInput = {
  readonly elemMatch: InputMaybe<FaqsFilterInput>;
};

type FaqsFrontmatter = {
  readonly answer: Scalars['String'];
  readonly faqs_id: Scalars['String'];
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly name: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly published: Scalars['Boolean'];
  readonly question: Scalars['String'];
  readonly show_on_career: Scalars['Boolean'];
  readonly slug: Scalars['String'];
};

type FaqsFrontmatterFieldSelector = {
  readonly answer: InputMaybe<FieldSelectorEnum>;
  readonly faqs_id: InputMaybe<FieldSelectorEnum>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly show_on_career: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
};

type FaqsFrontmatterFilterInput = {
  readonly answer: InputMaybe<StringQueryOperatorInput>;
  readonly faqs_id: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly show_on_career: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type FaqsFrontmatterSortInput = {
  readonly answer: InputMaybe<SortOrderEnum>;
  readonly faqs_id: InputMaybe<SortOrderEnum>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly show_on_career: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
};

type FaqsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FaqsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FaqsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Faqs>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FaqsGroupConnection_distinctArgs = {
  field: FaqsFieldSelector;
};


type FaqsGroupConnection_groupArgs = {
  field: FaqsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FaqsGroupConnection_maxArgs = {
  field: FaqsFieldSelector;
};


type FaqsGroupConnection_minArgs = {
  field: FaqsFieldSelector;
};


type FaqsGroupConnection_sumArgs = {
  field: FaqsFieldSelector;
};

type FaqsSortInput = {
  readonly answer: InputMaybe<SortOrderEnum>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly faqs_id: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<FaqsFrontmatterSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly show_on_career: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
  readonly childMdx: Maybe<Mdx>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type Mdx */
  readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childMdx: InputMaybe<MdxFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenMdx: InputMaybe<MdxFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMdx: InputMaybe<MdxFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMdx: InputMaybe<MdxFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childMdx: InputMaybe<MdxSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenMdx: InputMaybe<MdxSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type Jobs = Node & {
  readonly Show_recruiter_info: Maybe<Scalars['Boolean']>;
  readonly body: Scalars['String'];
  readonly button: Scalars['String'];
  readonly button_instagram: Maybe<Scalars['String']>;
  readonly button_linkedin: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly frontmatter: JobsFrontmatter;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly hours: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image_alt_job: Scalars['String'];
  readonly image_alt_recruiter_info: Maybe<Scalars['String']>;
  readonly image_recruiter_info: Maybe<File>;
  readonly imagejob: Maybe<File>;
  readonly internal: Internal;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly links_more_about_us: Maybe<Scalars['String']>;
  readonly name_recruiter: Maybe<Scalars['String']>;
  readonly order: Scalars['Float'];
  readonly parent: Maybe<Node>;
  readonly published: Scalars['Boolean'];
  readonly recruting_image2_title: Scalars['String'];
  readonly recruting_image3_title: Scalars['String'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly salary: Scalars['String'];
  readonly salary_max: Maybe<Scalars['Float']>;
  readonly salary_min: Maybe<Scalars['Float']>;
  readonly show_new_title_more_about_us: Scalars['Boolean'];
  readonly show_recruiter_info: Scalars['Boolean'];
  readonly subtitle: Scalars['String'];
  readonly technology: Scalars['String'];
  readonly title: Scalars['String'];
  readonly title_more_about_us: Maybe<Scalars['String']>;
  readonly title_recruiter_info: Maybe<Scalars['String']>;
  readonly working_time: Scalars['String'];
  readonly workplace_recruiter: Maybe<Scalars['String']>;
};


type Jobs_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type JobsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<JobsEdge>;
  readonly group: ReadonlyArray<JobsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Jobs>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type JobsConnection_distinctArgs = {
  field: JobsFieldSelector;
};


type JobsConnection_groupArgs = {
  field: JobsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type JobsConnection_maxArgs = {
  field: JobsFieldSelector;
};


type JobsConnection_minArgs = {
  field: JobsFieldSelector;
};


type JobsConnection_sumArgs = {
  field: JobsFieldSelector;
};

type JobsEdge = {
  readonly next: Maybe<Jobs>;
  readonly node: Jobs;
  readonly previous: Maybe<Jobs>;
};

type JobsFieldSelector = {
  readonly Show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly button_instagram: InputMaybe<FieldSelectorEnum>;
  readonly button_linkedin: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<JobsFrontmatterFieldSelector>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly hours: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_job: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly image_recruiter_info: InputMaybe<FileFieldSelector>;
  readonly imagejob: InputMaybe<FileFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly links_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly name_recruiter: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image2_title: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image3_title: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly salary: InputMaybe<FieldSelectorEnum>;
  readonly salary_max: InputMaybe<FieldSelectorEnum>;
  readonly salary_min: InputMaybe<FieldSelectorEnum>;
  readonly show_new_title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly technology: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly title_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly working_time: InputMaybe<FieldSelectorEnum>;
  readonly workplace_recruiter: InputMaybe<FieldSelectorEnum>;
};

type JobsFilterInput = {
  readonly Show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly button_instagram: InputMaybe<StringQueryOperatorInput>;
  readonly button_linkedin: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<JobsFrontmatterFilterInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly hours: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_job: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly image_recruiter_info: InputMaybe<FileFilterInput>;
  readonly imagejob: InputMaybe<FileFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly links_more_about_us: InputMaybe<StringQueryOperatorInput>;
  readonly name_recruiter: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly recruting_image2_title: InputMaybe<StringQueryOperatorInput>;
  readonly recruting_image3_title: InputMaybe<StringQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly salary: InputMaybe<StringQueryOperatorInput>;
  readonly salary_max: InputMaybe<FloatQueryOperatorInput>;
  readonly salary_min: InputMaybe<FloatQueryOperatorInput>;
  readonly show_new_title_more_about_us: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly technology: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_more_about_us: InputMaybe<StringQueryOperatorInput>;
  readonly title_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly working_time: InputMaybe<StringQueryOperatorInput>;
  readonly workplace_recruiter: InputMaybe<StringQueryOperatorInput>;
};

type JobsFilterListInput = {
  readonly elemMatch: InputMaybe<JobsFilterInput>;
};

type JobsFrontmatter = {
  readonly Show_recruiter_info: Maybe<Scalars['Boolean']>;
  readonly button: Scalars['String'];
  readonly button_instagram: Maybe<Scalars['String']>;
  readonly button_linkedin: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly hours: Scalars['String'];
  readonly image_alt_job: Scalars['String'];
  readonly image_alt_recruiter_info: Maybe<Scalars['String']>;
  readonly image_recruiter_info: Maybe<File>;
  readonly imagejob: Maybe<File>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly links_more_about_us: Maybe<Scalars['String']>;
  readonly name_recruiter: Maybe<Scalars['String']>;
  readonly order: Scalars['Float'];
  readonly published: Scalars['Boolean'];
  readonly recruting_image2_title: Scalars['String'];
  readonly recruting_image3_title: Scalars['String'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly salary: Scalars['String'];
  readonly salary_max: Maybe<Scalars['Float']>;
  readonly salary_min: Maybe<Scalars['Float']>;
  readonly show_new_title_more_about_us: Scalars['Boolean'];
  readonly show_recruiter_info: Scalars['Boolean'];
  readonly subtitle: Scalars['String'];
  readonly technology: Scalars['String'];
  readonly title: Scalars['String'];
  readonly title_more_about_us: Maybe<Scalars['String']>;
  readonly title_recruiter_info: Maybe<Scalars['String']>;
  readonly working_time: Scalars['String'];
  readonly workplace_recruiter: Maybe<Scalars['String']>;
};


type JobsFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type JobsFrontmatterFieldSelector = {
  readonly Show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly button_instagram: InputMaybe<FieldSelectorEnum>;
  readonly button_linkedin: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly hours: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_job: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly image_recruiter_info: InputMaybe<FileFieldSelector>;
  readonly imagejob: InputMaybe<FileFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly links_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly name_recruiter: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image2_title: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image3_title: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly salary: InputMaybe<FieldSelectorEnum>;
  readonly salary_max: InputMaybe<FieldSelectorEnum>;
  readonly salary_min: InputMaybe<FieldSelectorEnum>;
  readonly show_new_title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly technology: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly title_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly working_time: InputMaybe<FieldSelectorEnum>;
  readonly workplace_recruiter: InputMaybe<FieldSelectorEnum>;
};

type JobsFrontmatterFilterInput = {
  readonly Show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly button_instagram: InputMaybe<StringQueryOperatorInput>;
  readonly button_linkedin: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly hours: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_job: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly image_recruiter_info: InputMaybe<FileFilterInput>;
  readonly imagejob: InputMaybe<FileFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly links_more_about_us: InputMaybe<StringQueryOperatorInput>;
  readonly name_recruiter: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly recruting_image2_title: InputMaybe<StringQueryOperatorInput>;
  readonly recruting_image3_title: InputMaybe<StringQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly salary: InputMaybe<StringQueryOperatorInput>;
  readonly salary_max: InputMaybe<FloatQueryOperatorInput>;
  readonly salary_min: InputMaybe<FloatQueryOperatorInput>;
  readonly show_new_title_more_about_us: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly technology: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_more_about_us: InputMaybe<StringQueryOperatorInput>;
  readonly title_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly working_time: InputMaybe<StringQueryOperatorInput>;
  readonly workplace_recruiter: InputMaybe<StringQueryOperatorInput>;
};

type JobsFrontmatterSortInput = {
  readonly Show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly button_instagram: InputMaybe<SortOrderEnum>;
  readonly button_linkedin: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly hours: InputMaybe<SortOrderEnum>;
  readonly image_alt_job: InputMaybe<SortOrderEnum>;
  readonly image_alt_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly image_recruiter_info: InputMaybe<FileSortInput>;
  readonly imagejob: InputMaybe<FileSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly links_more_about_us: InputMaybe<SortOrderEnum>;
  readonly name_recruiter: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly recruting_image2_title: InputMaybe<SortOrderEnum>;
  readonly recruting_image3_title: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly salary: InputMaybe<SortOrderEnum>;
  readonly salary_max: InputMaybe<SortOrderEnum>;
  readonly salary_min: InputMaybe<SortOrderEnum>;
  readonly show_new_title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly technology: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly title_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly working_time: InputMaybe<SortOrderEnum>;
  readonly workplace_recruiter: InputMaybe<SortOrderEnum>;
};

type JobsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<JobsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<JobsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Jobs>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type JobsGroupConnection_distinctArgs = {
  field: JobsFieldSelector;
};


type JobsGroupConnection_groupArgs = {
  field: JobsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type JobsGroupConnection_maxArgs = {
  field: JobsFieldSelector;
};


type JobsGroupConnection_minArgs = {
  field: JobsFieldSelector;
};


type JobsGroupConnection_sumArgs = {
  field: JobsFieldSelector;
};

type JobsSortInput = {
  readonly Show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly button_instagram: InputMaybe<SortOrderEnum>;
  readonly button_linkedin: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<JobsFrontmatterSortInput>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly hours: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image_alt_job: InputMaybe<SortOrderEnum>;
  readonly image_alt_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly image_recruiter_info: InputMaybe<FileSortInput>;
  readonly imagejob: InputMaybe<FileSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly links_more_about_us: InputMaybe<SortOrderEnum>;
  readonly name_recruiter: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly recruting_image2_title: InputMaybe<SortOrderEnum>;
  readonly recruting_image3_title: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly salary: InputMaybe<SortOrderEnum>;
  readonly salary_max: InputMaybe<SortOrderEnum>;
  readonly salary_min: InputMaybe<SortOrderEnum>;
  readonly show_new_title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly technology: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly title_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly working_time: InputMaybe<SortOrderEnum>;
  readonly workplace_recruiter: InputMaybe<SortOrderEnum>;
};

type Mdx = Node & {
  readonly body: Maybe<Scalars['String']>;
  /** Returns the first child node of type Blog or null if there are no children of given type on this node */
  readonly childBlog: Maybe<Blog>;
  /** Returns the first child node of type Faqs or null if there are no children of given type on this node */
  readonly childFaqs: Maybe<Faqs>;
  /** Returns the first child node of type Jobs or null if there are no children of given type on this node */
  readonly childJobs: Maybe<Jobs>;
  /** Returns the first child node of type Members or null if there are no children of given type on this node */
  readonly childMembers: Maybe<Members>;
  /** Returns the first child node of type OurAreas or null if there are no children of given type on this node */
  readonly childOurAreas: Maybe<OurAreas>;
  /** Returns the first child node of type Projects or null if there are no children of given type on this node */
  readonly childProjects: Maybe<Projects>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type Blog */
  readonly childrenBlog: Maybe<ReadonlyArray<Maybe<Blog>>>;
  /** Returns all children nodes filtered by type Faqs */
  readonly childrenFaqs: Maybe<ReadonlyArray<Maybe<Faqs>>>;
  /** Returns all children nodes filtered by type Jobs */
  readonly childrenJobs: Maybe<ReadonlyArray<Maybe<Jobs>>>;
  /** Returns all children nodes filtered by type Members */
  readonly childrenMembers: Maybe<ReadonlyArray<Maybe<Members>>>;
  /** Returns all children nodes filtered by type OurAreas */
  readonly childrenOurAreas: Maybe<ReadonlyArray<Maybe<OurAreas>>>;
  /** Returns all children nodes filtered by type Projects */
  readonly childrenProjects: Maybe<ReadonlyArray<Maybe<Projects>>>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly fields: Maybe<MdxFields>;
  readonly frontmatter: Maybe<MdxFrontmatter>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['JSON']>;
};


type Mdx_excerptArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
};


type Mdx_tableOfContentsArgs = {
  maxDepth: InputMaybe<Scalars['Int']>;
};

type MdxConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxEdge = {
  readonly next: Maybe<Mdx>;
  readonly node: Mdx;
  readonly previous: Maybe<Mdx>;
};

type MdxFieldSelector = {
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly childBlog: InputMaybe<BlogFieldSelector>;
  readonly childFaqs: InputMaybe<FaqsFieldSelector>;
  readonly childJobs: InputMaybe<JobsFieldSelector>;
  readonly childMembers: InputMaybe<MembersFieldSelector>;
  readonly childOurAreas: InputMaybe<OurAreasFieldSelector>;
  readonly childProjects: InputMaybe<ProjectsFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenBlog: InputMaybe<BlogFieldSelector>;
  readonly childrenFaqs: InputMaybe<FaqsFieldSelector>;
  readonly childrenJobs: InputMaybe<JobsFieldSelector>;
  readonly childrenMembers: InputMaybe<MembersFieldSelector>;
  readonly childrenOurAreas: InputMaybe<OurAreasFieldSelector>;
  readonly childrenProjects: InputMaybe<ProjectsFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<MdxFieldsFieldSelector>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
};

type MdxFields = {
  readonly modifiedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<MdxFieldsTimeToRead>;
};


type MdxFields_modifiedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFieldsFieldSelector = {
  readonly modifiedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<MdxFieldsTimeToReadFieldSelector>;
};

type MdxFieldsFilterInput = {
  readonly modifiedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<MdxFieldsTimeToReadFilterInput>;
};

type MdxFieldsSortInput = {
  readonly modifiedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<MdxFieldsTimeToReadSortInput>;
};

type MdxFieldsTimeToRead = {
  readonly minutes: Maybe<Scalars['Float']>;
  readonly text: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MdxFieldsTimeToReadFieldSelector = {
  readonly minutes: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly time: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MdxFieldsTimeToReadFilterInput = {
  readonly minutes: InputMaybe<FloatQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MdxFieldsTimeToReadSortInput = {
  readonly minutes: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly time: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

type MdxFilterInput = {
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly childBlog: InputMaybe<BlogFilterInput>;
  readonly childFaqs: InputMaybe<FaqsFilterInput>;
  readonly childJobs: InputMaybe<JobsFilterInput>;
  readonly childMembers: InputMaybe<MembersFilterInput>;
  readonly childOurAreas: InputMaybe<OurAreasFilterInput>;
  readonly childProjects: InputMaybe<ProjectsFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenBlog: InputMaybe<BlogFilterListInput>;
  readonly childrenFaqs: InputMaybe<FaqsFilterListInput>;
  readonly childrenJobs: InputMaybe<JobsFilterListInput>;
  readonly childrenMembers: InputMaybe<MembersFilterListInput>;
  readonly childrenOurAreas: InputMaybe<OurAreasFilterListInput>;
  readonly childrenProjects: InputMaybe<ProjectsFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<MdxFieldsFilterInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};

type MdxFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFilterInput>;
};

type MdxFrontmatter = {
  readonly Hero_Image_alt: Maybe<Scalars['String']>;
  readonly Show_recruiter_info: Maybe<Scalars['Boolean']>;
  readonly answer: Maybe<SimpleMdx>;
  readonly author: Maybe<Scalars['String']>;
  readonly author_id: Maybe<Scalars['String']>;
  readonly avatar: Maybe<File>;
  readonly avatar_hover: Maybe<File>;
  readonly bar_achievements: Maybe<ReadonlyArray<Maybe<MdxFrontmatterBar_achievements>>>;
  readonly bar_stack: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly bio: Maybe<Scalars['String']>;
  readonly blog_section: Maybe<Scalars['Boolean']>;
  readonly blog_section_tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly blog_section_title: Maybe<Scalars['String']>;
  readonly bullet_points: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly button: Maybe<Scalars['String']>;
  readonly button2: Maybe<Scalars['String']>;
  readonly button_instagram: Maybe<Scalars['String']>;
  readonly button_linkedin: Maybe<Scalars['String']>;
  readonly canonicalUrl: Maybe<Scalars['String']>;
  readonly categories: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly comments: Maybe<Scalars['Boolean']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly description_contact: Maybe<Scalars['String']>;
  readonly description_mdx: Maybe<SimpleMdx>;
  readonly descrption: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly ex: Maybe<Scalars['Boolean']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly extract: Maybe<Scalars['String']>;
  readonly faqs: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly faqs_id: Maybe<Scalars['String']>;
  readonly github: Maybe<Scalars['String']>;
  readonly hero_image: Maybe<File>;
  readonly hero_image_alt: Maybe<Scalars['String']>;
  readonly hidden: Maybe<Scalars['Boolean']>;
  readonly highlighted_word: Maybe<Scalars['String']>;
  readonly hobby: Maybe<Scalars['String']>;
  readonly hours: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly image_alt_job: Maybe<Scalars['String']>;
  readonly image_alt_our_service: Maybe<Scalars['String']>;
  readonly image_alt_our_service_desktop: Maybe<Scalars['String']>;
  readonly image_alt_our_service_mobile: Maybe<Scalars['String']>;
  readonly image_alt_recruiter_info: Maybe<Scalars['String']>;
  readonly image_our_service: Maybe<File>;
  readonly image_our_service_desktop: Maybe<File>;
  readonly image_our_service_mobile: Maybe<File>;
  readonly image_recruiter_info: Maybe<File>;
  readonly imagejob: Maybe<File>;
  readonly intro: Maybe<Scalars['String']>;
  readonly language: Maybe<Scalars['String']>;
  readonly layout: Maybe<Scalars['String']>;
  readonly links_more_about_us: Maybe<SimpleMdx>;
  readonly meaningfullyUpdatedAt: Maybe<Scalars['Date']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
  readonly modified: Maybe<Scalars['Date']>;
  readonly name: Maybe<Scalars['String']>;
  readonly name_recruiter: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly our_service: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly our_service_id: Maybe<Scalars['String']>;
  readonly our_services_icon: Maybe<File>;
  readonly project: Maybe<ReadonlyArray<Maybe<Mdx>>>;
  readonly project_id: Maybe<Scalars['String']>;
  readonly published: Maybe<Scalars['Boolean']>;
  readonly question: Maybe<Scalars['String']>;
  readonly recruting_image2_title: Maybe<Scalars['String']>;
  readonly recruting_image3_title: Maybe<Scalars['String']>;
  readonly redirect_from: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly salary: Maybe<Scalars['String']>;
  readonly salary_max: Maybe<Scalars['Int']>;
  readonly salary_min: Maybe<Scalars['Int']>;
  readonly secondAuthor: Maybe<Scalars['String']>;
  readonly short_description: Maybe<Scalars['String']>;
  readonly short_name: Maybe<Scalars['String']>;
  readonly show_case_study: Maybe<Scalars['Boolean']>;
  readonly show_new_title_more_about_us: Maybe<Scalars['Boolean']>;
  readonly show_on_career: Maybe<Scalars['Boolean']>;
  readonly show_on_homepage: Maybe<Scalars['Boolean']>;
  readonly show_recruiter_info: Maybe<Scalars['Boolean']>;
  readonly show_team: Maybe<Scalars['Boolean']>;
  readonly show_technology_stack: Maybe<Scalars['Boolean']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly social_media_previev: Maybe<File>;
  readonly social_media_previev_alt: Maybe<Scalars['String']>;
  readonly stackoverflow: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly team_members: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly technology: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly thirdAuthor: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly title_case_study: Maybe<Scalars['String']>;
  readonly title_contact: Maybe<Scalars['String']>;
  readonly title_faqs: Maybe<Scalars['String']>;
  readonly title_more_about_us: Maybe<Scalars['String']>;
  readonly title_recruiter_info: Maybe<Scalars['String']>;
  readonly title_team: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly web: Maybe<Scalars['String']>;
  readonly work_in_progress: Maybe<Scalars['Boolean']>;
  readonly working_time: Maybe<Scalars['String']>;
  readonly workplace_recruiter: Maybe<Scalars['String']>;
};


type MdxFrontmatter_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MdxFrontmatter_meaningfullyUpdatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type MdxFrontmatter_modifiedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MdxFrontmatterBar_achievements = {
  readonly label: Maybe<Scalars['String']>;
  readonly number: Maybe<Scalars['String']>;
};

type MdxFrontmatterBar_achievementsFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly number: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterBar_achievementsFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly number: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterBar_achievementsFilterListInput = {
  readonly elemMatch: InputMaybe<MdxFrontmatterBar_achievementsFilterInput>;
};

type MdxFrontmatterBar_achievementsSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly number: InputMaybe<SortOrderEnum>;
};

type MdxFrontmatterFieldSelector = {
  readonly Hero_Image_alt: InputMaybe<FieldSelectorEnum>;
  readonly Show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly answer: InputMaybe<SimpleMdxFieldSelector>;
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly author_id: InputMaybe<FieldSelectorEnum>;
  readonly avatar: InputMaybe<FileFieldSelector>;
  readonly avatar_hover: InputMaybe<FileFieldSelector>;
  readonly bar_achievements: InputMaybe<MdxFrontmatterBar_achievementsFieldSelector>;
  readonly bar_stack: InputMaybe<FieldSelectorEnum>;
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly blog_section: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_tags: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_title: InputMaybe<FieldSelectorEnum>;
  readonly bullet_points: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly button2: InputMaybe<FieldSelectorEnum>;
  readonly button_instagram: InputMaybe<FieldSelectorEnum>;
  readonly button_linkedin: InputMaybe<FieldSelectorEnum>;
  readonly canonicalUrl: InputMaybe<FieldSelectorEnum>;
  readonly categories: InputMaybe<FieldSelectorEnum>;
  readonly comments: InputMaybe<FieldSelectorEnum>;
  readonly date: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly description_contact: InputMaybe<FieldSelectorEnum>;
  readonly description_mdx: InputMaybe<SimpleMdxFieldSelector>;
  readonly descrption: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly ex: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly extract: InputMaybe<FieldSelectorEnum>;
  readonly faqs: InputMaybe<MdxFieldSelector>;
  readonly faqs_id: InputMaybe<FieldSelectorEnum>;
  readonly github: InputMaybe<FieldSelectorEnum>;
  readonly hero_image: InputMaybe<FileFieldSelector>;
  readonly hero_image_alt: InputMaybe<FieldSelectorEnum>;
  readonly hidden: InputMaybe<FieldSelectorEnum>;
  readonly highlighted_word: InputMaybe<FieldSelectorEnum>;
  readonly hobby: InputMaybe<FieldSelectorEnum>;
  readonly hours: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly image_alt_job: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly image_our_service: InputMaybe<FileFieldSelector>;
  readonly image_our_service_desktop: InputMaybe<FileFieldSelector>;
  readonly image_our_service_mobile: InputMaybe<FileFieldSelector>;
  readonly image_recruiter_info: InputMaybe<FileFieldSelector>;
  readonly imagejob: InputMaybe<FileFieldSelector>;
  readonly intro: InputMaybe<FieldSelectorEnum>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly links_more_about_us: InputMaybe<SimpleMdxFieldSelector>;
  readonly meaningfullyUpdatedAt: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly modified: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly name_recruiter: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly our_service: InputMaybe<MdxFieldSelector>;
  readonly our_service_id: InputMaybe<FieldSelectorEnum>;
  readonly our_services_icon: InputMaybe<FileFieldSelector>;
  readonly project: InputMaybe<MdxFieldSelector>;
  readonly project_id: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image2_title: InputMaybe<FieldSelectorEnum>;
  readonly recruting_image3_title: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly salary: InputMaybe<FieldSelectorEnum>;
  readonly salary_max: InputMaybe<FieldSelectorEnum>;
  readonly salary_min: InputMaybe<FieldSelectorEnum>;
  readonly secondAuthor: InputMaybe<FieldSelectorEnum>;
  readonly short_description: InputMaybe<FieldSelectorEnum>;
  readonly short_name: InputMaybe<FieldSelectorEnum>;
  readonly show_case_study: InputMaybe<FieldSelectorEnum>;
  readonly show_new_title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly show_on_career: InputMaybe<FieldSelectorEnum>;
  readonly show_on_homepage: InputMaybe<FieldSelectorEnum>;
  readonly show_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly show_team: InputMaybe<FieldSelectorEnum>;
  readonly show_technology_stack: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly social_media_previev: InputMaybe<FileFieldSelector>;
  readonly social_media_previev_alt: InputMaybe<FieldSelectorEnum>;
  readonly stackoverflow: InputMaybe<FieldSelectorEnum>;
  readonly subtitle: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly team_members: InputMaybe<FieldSelectorEnum>;
  readonly technology: InputMaybe<FieldSelectorEnum>;
  readonly thirdAuthor: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_case_study: InputMaybe<FieldSelectorEnum>;
  readonly title_contact: InputMaybe<FieldSelectorEnum>;
  readonly title_faqs: InputMaybe<FieldSelectorEnum>;
  readonly title_more_about_us: InputMaybe<FieldSelectorEnum>;
  readonly title_recruiter_info: InputMaybe<FieldSelectorEnum>;
  readonly title_team: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly web: InputMaybe<FieldSelectorEnum>;
  readonly work_in_progress: InputMaybe<FieldSelectorEnum>;
  readonly working_time: InputMaybe<FieldSelectorEnum>;
  readonly workplace_recruiter: InputMaybe<FieldSelectorEnum>;
};

type MdxFrontmatterFilterInput = {
  readonly Hero_Image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly Show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly answer: InputMaybe<SimpleMdxFilterInput>;
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly author_id: InputMaybe<StringQueryOperatorInput>;
  readonly avatar: InputMaybe<FileFilterInput>;
  readonly avatar_hover: InputMaybe<FileFilterInput>;
  readonly bar_achievements: InputMaybe<MdxFrontmatterBar_achievementsFilterListInput>;
  readonly bar_stack: InputMaybe<StringQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section: InputMaybe<BooleanQueryOperatorInput>;
  readonly blog_section_tags: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section_title: InputMaybe<StringQueryOperatorInput>;
  readonly bullet_points: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly button2: InputMaybe<StringQueryOperatorInput>;
  readonly button_instagram: InputMaybe<StringQueryOperatorInput>;
  readonly button_linkedin: InputMaybe<StringQueryOperatorInput>;
  readonly canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  readonly categories: InputMaybe<StringQueryOperatorInput>;
  readonly comments: InputMaybe<BooleanQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly description_contact: InputMaybe<StringQueryOperatorInput>;
  readonly description_mdx: InputMaybe<SimpleMdxFilterInput>;
  readonly descrption: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly ex: InputMaybe<BooleanQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly extract: InputMaybe<StringQueryOperatorInput>;
  readonly faqs: InputMaybe<MdxFilterListInput>;
  readonly faqs_id: InputMaybe<StringQueryOperatorInput>;
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly hero_image: InputMaybe<FileFilterInput>;
  readonly hero_image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly hidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly highlighted_word: InputMaybe<StringQueryOperatorInput>;
  readonly hobby: InputMaybe<StringQueryOperatorInput>;
  readonly hours: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly image_alt_job: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_desktop: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_mobile: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly image_our_service: InputMaybe<FileFilterInput>;
  readonly image_our_service_desktop: InputMaybe<FileFilterInput>;
  readonly image_our_service_mobile: InputMaybe<FileFilterInput>;
  readonly image_recruiter_info: InputMaybe<FileFilterInput>;
  readonly imagejob: InputMaybe<FileFilterInput>;
  readonly intro: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly links_more_about_us: InputMaybe<SimpleMdxFilterInput>;
  readonly meaningfullyUpdatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly modified: InputMaybe<DateQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly name_recruiter: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly our_service: InputMaybe<MdxFilterListInput>;
  readonly our_service_id: InputMaybe<StringQueryOperatorInput>;
  readonly our_services_icon: InputMaybe<FileFilterInput>;
  readonly project: InputMaybe<MdxFilterListInput>;
  readonly project_id: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly recruting_image2_title: InputMaybe<StringQueryOperatorInput>;
  readonly recruting_image3_title: InputMaybe<StringQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly salary: InputMaybe<StringQueryOperatorInput>;
  readonly salary_max: InputMaybe<IntQueryOperatorInput>;
  readonly salary_min: InputMaybe<IntQueryOperatorInput>;
  readonly secondAuthor: InputMaybe<StringQueryOperatorInput>;
  readonly short_description: InputMaybe<StringQueryOperatorInput>;
  readonly short_name: InputMaybe<StringQueryOperatorInput>;
  readonly show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_new_title_more_about_us: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_on_career: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_on_homepage: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_team: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_technology_stack: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly social_media_previev: InputMaybe<FileFilterInput>;
  readonly social_media_previev_alt: InputMaybe<StringQueryOperatorInput>;
  readonly stackoverflow: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly team_members: InputMaybe<StringQueryOperatorInput>;
  readonly technology: InputMaybe<StringQueryOperatorInput>;
  readonly thirdAuthor: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_case_study: InputMaybe<StringQueryOperatorInput>;
  readonly title_contact: InputMaybe<StringQueryOperatorInput>;
  readonly title_faqs: InputMaybe<StringQueryOperatorInput>;
  readonly title_more_about_us: InputMaybe<StringQueryOperatorInput>;
  readonly title_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  readonly title_team: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly web: InputMaybe<StringQueryOperatorInput>;
  readonly work_in_progress: InputMaybe<BooleanQueryOperatorInput>;
  readonly working_time: InputMaybe<StringQueryOperatorInput>;
  readonly workplace_recruiter: InputMaybe<StringQueryOperatorInput>;
};

type MdxFrontmatterSortInput = {
  readonly Hero_Image_alt: InputMaybe<SortOrderEnum>;
  readonly Show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly answer: InputMaybe<SimpleMdxSortInput>;
  readonly author: InputMaybe<SortOrderEnum>;
  readonly author_id: InputMaybe<SortOrderEnum>;
  readonly avatar: InputMaybe<FileSortInput>;
  readonly avatar_hover: InputMaybe<FileSortInput>;
  readonly bar_achievements: InputMaybe<MdxFrontmatterBar_achievementsSortInput>;
  readonly bar_stack: InputMaybe<SortOrderEnum>;
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly blog_section: InputMaybe<SortOrderEnum>;
  readonly blog_section_tags: InputMaybe<SortOrderEnum>;
  readonly blog_section_title: InputMaybe<SortOrderEnum>;
  readonly bullet_points: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly button2: InputMaybe<SortOrderEnum>;
  readonly button_instagram: InputMaybe<SortOrderEnum>;
  readonly button_linkedin: InputMaybe<SortOrderEnum>;
  readonly canonicalUrl: InputMaybe<SortOrderEnum>;
  readonly categories: InputMaybe<SortOrderEnum>;
  readonly comments: InputMaybe<SortOrderEnum>;
  readonly date: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly description_contact: InputMaybe<SortOrderEnum>;
  readonly description_mdx: InputMaybe<SimpleMdxSortInput>;
  readonly descrption: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly ex: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly extract: InputMaybe<SortOrderEnum>;
  readonly faqs: InputMaybe<MdxSortInput>;
  readonly faqs_id: InputMaybe<SortOrderEnum>;
  readonly github: InputMaybe<SortOrderEnum>;
  readonly hero_image: InputMaybe<FileSortInput>;
  readonly hero_image_alt: InputMaybe<SortOrderEnum>;
  readonly hidden: InputMaybe<SortOrderEnum>;
  readonly highlighted_word: InputMaybe<SortOrderEnum>;
  readonly hobby: InputMaybe<SortOrderEnum>;
  readonly hours: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly image_alt_job: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<SortOrderEnum>;
  readonly image_alt_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly image_our_service: InputMaybe<FileSortInput>;
  readonly image_our_service_desktop: InputMaybe<FileSortInput>;
  readonly image_our_service_mobile: InputMaybe<FileSortInput>;
  readonly image_recruiter_info: InputMaybe<FileSortInput>;
  readonly imagejob: InputMaybe<FileSortInput>;
  readonly intro: InputMaybe<SortOrderEnum>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly links_more_about_us: InputMaybe<SimpleMdxSortInput>;
  readonly meaningfullyUpdatedAt: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly modified: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly name_recruiter: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly our_service: InputMaybe<MdxSortInput>;
  readonly our_service_id: InputMaybe<SortOrderEnum>;
  readonly our_services_icon: InputMaybe<FileSortInput>;
  readonly project: InputMaybe<MdxSortInput>;
  readonly project_id: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly recruting_image2_title: InputMaybe<SortOrderEnum>;
  readonly recruting_image3_title: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly salary: InputMaybe<SortOrderEnum>;
  readonly salary_max: InputMaybe<SortOrderEnum>;
  readonly salary_min: InputMaybe<SortOrderEnum>;
  readonly secondAuthor: InputMaybe<SortOrderEnum>;
  readonly short_description: InputMaybe<SortOrderEnum>;
  readonly short_name: InputMaybe<SortOrderEnum>;
  readonly show_case_study: InputMaybe<SortOrderEnum>;
  readonly show_new_title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly show_on_career: InputMaybe<SortOrderEnum>;
  readonly show_on_homepage: InputMaybe<SortOrderEnum>;
  readonly show_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly show_team: InputMaybe<SortOrderEnum>;
  readonly show_technology_stack: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly social_media_previev: InputMaybe<FileSortInput>;
  readonly social_media_previev_alt: InputMaybe<SortOrderEnum>;
  readonly stackoverflow: InputMaybe<SortOrderEnum>;
  readonly subtitle: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly team_members: InputMaybe<SortOrderEnum>;
  readonly technology: InputMaybe<SortOrderEnum>;
  readonly thirdAuthor: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_case_study: InputMaybe<SortOrderEnum>;
  readonly title_contact: InputMaybe<SortOrderEnum>;
  readonly title_faqs: InputMaybe<SortOrderEnum>;
  readonly title_more_about_us: InputMaybe<SortOrderEnum>;
  readonly title_recruiter_info: InputMaybe<SortOrderEnum>;
  readonly title_team: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly web: InputMaybe<SortOrderEnum>;
  readonly work_in_progress: InputMaybe<SortOrderEnum>;
  readonly working_time: InputMaybe<SortOrderEnum>;
  readonly workplace_recruiter: InputMaybe<SortOrderEnum>;
};

type MdxGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MdxEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MdxGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Mdx>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MdxGroupConnection_distinctArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_groupArgs = {
  field: MdxFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MdxGroupConnection_maxArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_minArgs = {
  field: MdxFieldSelector;
};


type MdxGroupConnection_sumArgs = {
  field: MdxFieldSelector;
};

type MdxSortInput = {
  readonly body: InputMaybe<SortOrderEnum>;
  readonly childBlog: InputMaybe<BlogSortInput>;
  readonly childFaqs: InputMaybe<FaqsSortInput>;
  readonly childJobs: InputMaybe<JobsSortInput>;
  readonly childMembers: InputMaybe<MembersSortInput>;
  readonly childOurAreas: InputMaybe<OurAreasSortInput>;
  readonly childProjects: InputMaybe<ProjectsSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenBlog: InputMaybe<BlogSortInput>;
  readonly childrenFaqs: InputMaybe<FaqsSortInput>;
  readonly childrenJobs: InputMaybe<JobsSortInput>;
  readonly childrenMembers: InputMaybe<MembersSortInput>;
  readonly childrenOurAreas: InputMaybe<OurAreasSortInput>;
  readonly childrenProjects: InputMaybe<ProjectsSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<MdxFieldsSortInput>;
  readonly frontmatter: InputMaybe<MdxFrontmatterSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
};

type Members = Node & {
  readonly author_id: Scalars['String'];
  readonly avatar: Maybe<File>;
  readonly avatar_hover: Maybe<File>;
  readonly bio: Scalars['String'];
  readonly body: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly crosspost: Maybe<Scalars['String']>;
  readonly description: Scalars['String'];
  readonly descrption: Maybe<Scalars['String']>;
  readonly email: Scalars['String'];
  readonly ex: Maybe<Scalars['Boolean']>;
  readonly frontmatter: MembersFrontmatter;
  readonly github: Maybe<Scalars['String']>;
  readonly hobby: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly name: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly posts: Maybe<ReadonlyArray<Maybe<Blog>>>;
  readonly published: Scalars['Boolean'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly short_name: Scalars['String'];
  readonly slug: Scalars['String'];
  readonly stackoverflow: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly web: Maybe<Scalars['String']>;
};

type MembersConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MembersEdge>;
  readonly group: ReadonlyArray<MembersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Members>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MembersConnection_distinctArgs = {
  field: MembersFieldSelector;
};


type MembersConnection_groupArgs = {
  field: MembersFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MembersConnection_maxArgs = {
  field: MembersFieldSelector;
};


type MembersConnection_minArgs = {
  field: MembersFieldSelector;
};


type MembersConnection_sumArgs = {
  field: MembersFieldSelector;
};

type MembersEdge = {
  readonly next: Maybe<Members>;
  readonly node: Members;
  readonly previous: Maybe<Members>;
};

type MembersFieldSelector = {
  readonly author_id: InputMaybe<FieldSelectorEnum>;
  readonly avatar: InputMaybe<FileFieldSelector>;
  readonly avatar_hover: InputMaybe<FileFieldSelector>;
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly crosspost: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly descrption: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly ex: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MembersFrontmatterFieldSelector>;
  readonly github: InputMaybe<FieldSelectorEnum>;
  readonly hobby: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly posts: InputMaybe<BlogFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly short_name: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly stackoverflow: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly web: InputMaybe<FieldSelectorEnum>;
};

type MembersFilterInput = {
  readonly author_id: InputMaybe<StringQueryOperatorInput>;
  readonly avatar: InputMaybe<FileFilterInput>;
  readonly avatar_hover: InputMaybe<FileFilterInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly crosspost: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly descrption: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly ex: InputMaybe<BooleanQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MembersFrontmatterFilterInput>;
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly hobby: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly posts: InputMaybe<BlogFilterListInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly short_name: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly stackoverflow: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly web: InputMaybe<StringQueryOperatorInput>;
};

type MembersFilterListInput = {
  readonly elemMatch: InputMaybe<MembersFilterInput>;
};

type MembersFrontmatter = {
  readonly author_id: Scalars['String'];
  readonly avatar: Maybe<File>;
  readonly avatar_hover: Maybe<File>;
  readonly bio: Scalars['String'];
  readonly crosspost: Maybe<Scalars['String']>;
  readonly description: Scalars['String'];
  readonly descrption: Maybe<Scalars['String']>;
  readonly email: Scalars['String'];
  readonly ex: Maybe<Scalars['Boolean']>;
  readonly github: Maybe<Scalars['String']>;
  readonly hobby: Maybe<Scalars['String']>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly name: Scalars['String'];
  readonly published: Scalars['Boolean'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly short_name: Scalars['String'];
  readonly slug: Scalars['String'];
  readonly stackoverflow: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitter: Maybe<Scalars['String']>;
  readonly web: Maybe<Scalars['String']>;
};

type MembersFrontmatterFieldSelector = {
  readonly author_id: InputMaybe<FieldSelectorEnum>;
  readonly avatar: InputMaybe<FileFieldSelector>;
  readonly avatar_hover: InputMaybe<FileFieldSelector>;
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly crosspost: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly descrption: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly ex: InputMaybe<FieldSelectorEnum>;
  readonly github: InputMaybe<FieldSelectorEnum>;
  readonly hobby: InputMaybe<FieldSelectorEnum>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly short_name: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly stackoverflow: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitter: InputMaybe<FieldSelectorEnum>;
  readonly web: InputMaybe<FieldSelectorEnum>;
};

type MembersFrontmatterFilterInput = {
  readonly author_id: InputMaybe<StringQueryOperatorInput>;
  readonly avatar: InputMaybe<FileFilterInput>;
  readonly avatar_hover: InputMaybe<FileFilterInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly crosspost: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly descrption: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly ex: InputMaybe<BooleanQueryOperatorInput>;
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly hobby: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly short_name: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly stackoverflow: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitter: InputMaybe<StringQueryOperatorInput>;
  readonly web: InputMaybe<StringQueryOperatorInput>;
};

type MembersFrontmatterSortInput = {
  readonly author_id: InputMaybe<SortOrderEnum>;
  readonly avatar: InputMaybe<FileSortInput>;
  readonly avatar_hover: InputMaybe<FileSortInput>;
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly crosspost: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly descrption: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly ex: InputMaybe<SortOrderEnum>;
  readonly github: InputMaybe<SortOrderEnum>;
  readonly hobby: InputMaybe<SortOrderEnum>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly short_name: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly stackoverflow: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly web: InputMaybe<SortOrderEnum>;
};

type MembersGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MembersEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MembersGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Members>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MembersGroupConnection_distinctArgs = {
  field: MembersFieldSelector;
};


type MembersGroupConnection_groupArgs = {
  field: MembersFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MembersGroupConnection_maxArgs = {
  field: MembersFieldSelector;
};


type MembersGroupConnection_minArgs = {
  field: MembersFieldSelector;
};


type MembersGroupConnection_sumArgs = {
  field: MembersFieldSelector;
};

type MembersSortInput = {
  readonly author_id: InputMaybe<SortOrderEnum>;
  readonly avatar: InputMaybe<FileSortInput>;
  readonly avatar_hover: InputMaybe<FileSortInput>;
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly crosspost: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly descrption: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly ex: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MembersFrontmatterSortInput>;
  readonly github: InputMaybe<SortOrderEnum>;
  readonly hobby: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly posts: InputMaybe<BlogSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly short_name: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly stackoverflow: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitter: InputMaybe<SortOrderEnum>;
  readonly web: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type OurAreas = Node & {
  readonly bar_stack: Scalars['String'];
  readonly blog_section: Scalars['Boolean'];
  readonly blog_section_tags: Scalars['String'];
  readonly blog_section_title: Scalars['String'];
  readonly body: Scalars['String'];
  readonly bullet_points: Scalars['String'];
  readonly button: Scalars['String'];
  readonly button2: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly description_contact: Scalars['String'];
  readonly description_mdx: Maybe<Scalars['String']>;
  readonly faqs: ReadonlyArray<Maybe<Faqs>>;
  readonly frontmatter: OurAreasFrontmatter;
  readonly highlighted_word: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly image_alt_our_service: Scalars['String'];
  readonly image_alt_our_service_desktop: Maybe<Scalars['String']>;
  readonly image_alt_our_service_mobile: Maybe<Scalars['String']>;
  readonly image_our_service: Maybe<File>;
  readonly image_our_service_desktop: Maybe<File>;
  readonly image_our_service_mobile: Maybe<File>;
  readonly internal: Internal;
  readonly intro: Maybe<Scalars['String']>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly meta_description: Scalars['String'];
  readonly meta_title: Scalars['String'];
  readonly name: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly our_service_id: Scalars['String'];
  readonly our_services_icon: Maybe<File>;
  readonly parent: Maybe<Node>;
  readonly project: ReadonlyArray<Maybe<Projects>>;
  readonly published: Scalars['Boolean'];
  readonly short_description: Scalars['String'];
  readonly show_case_study: Scalars['Boolean'];
  readonly show_technology_stack: Scalars['Boolean'];
  readonly slug: Scalars['String'];
  readonly team_members: ReadonlyArray<Maybe<Members>>;
  readonly title: Scalars['String'];
  readonly title_case_study: Scalars['String'];
  readonly title_contact: Scalars['String'];
  readonly title_faqs: Scalars['String'];
  readonly title_team: Scalars['String'];
};

type OurAreasConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<OurAreasEdge>;
  readonly group: ReadonlyArray<OurAreasGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<OurAreas>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type OurAreasConnection_distinctArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasConnection_groupArgs = {
  field: OurAreasFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type OurAreasConnection_maxArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasConnection_minArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasConnection_sumArgs = {
  field: OurAreasFieldSelector;
};

type OurAreasEdge = {
  readonly next: Maybe<OurAreas>;
  readonly node: OurAreas;
  readonly previous: Maybe<OurAreas>;
};

type OurAreasFieldSelector = {
  readonly bar_stack: InputMaybe<FieldSelectorEnum>;
  readonly blog_section: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_tags: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_title: InputMaybe<FieldSelectorEnum>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly bullet_points: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly button2: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description_contact: InputMaybe<FieldSelectorEnum>;
  readonly description_mdx: InputMaybe<FieldSelectorEnum>;
  readonly faqs: InputMaybe<FaqsFieldSelector>;
  readonly frontmatter: InputMaybe<OurAreasFrontmatterFieldSelector>;
  readonly highlighted_word: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<FieldSelectorEnum>;
  readonly image_our_service: InputMaybe<FileFieldSelector>;
  readonly image_our_service_desktop: InputMaybe<FileFieldSelector>;
  readonly image_our_service_mobile: InputMaybe<FileFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly intro: InputMaybe<FieldSelectorEnum>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly our_service_id: InputMaybe<FieldSelectorEnum>;
  readonly our_services_icon: InputMaybe<FileFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly project: InputMaybe<ProjectsFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly short_description: InputMaybe<FieldSelectorEnum>;
  readonly show_case_study: InputMaybe<FieldSelectorEnum>;
  readonly show_technology_stack: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly team_members: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_case_study: InputMaybe<FieldSelectorEnum>;
  readonly title_contact: InputMaybe<FieldSelectorEnum>;
  readonly title_faqs: InputMaybe<FieldSelectorEnum>;
  readonly title_team: InputMaybe<FieldSelectorEnum>;
};

type OurAreasFilterInput = {
  readonly bar_stack: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section: InputMaybe<BooleanQueryOperatorInput>;
  readonly blog_section_tags: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section_title: InputMaybe<StringQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly bullet_points: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly button2: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description_contact: InputMaybe<StringQueryOperatorInput>;
  readonly description_mdx: InputMaybe<StringQueryOperatorInput>;
  readonly faqs: InputMaybe<FaqsFilterListInput>;
  readonly frontmatter: InputMaybe<OurAreasFrontmatterFilterInput>;
  readonly highlighted_word: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_desktop: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_mobile: InputMaybe<StringQueryOperatorInput>;
  readonly image_our_service: InputMaybe<FileFilterInput>;
  readonly image_our_service_desktop: InputMaybe<FileFilterInput>;
  readonly image_our_service_mobile: InputMaybe<FileFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly intro: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly our_service_id: InputMaybe<StringQueryOperatorInput>;
  readonly our_services_icon: InputMaybe<FileFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly project: InputMaybe<ProjectsFilterListInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly short_description: InputMaybe<StringQueryOperatorInput>;
  readonly show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_technology_stack: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly team_members: InputMaybe<MembersFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_case_study: InputMaybe<StringQueryOperatorInput>;
  readonly title_contact: InputMaybe<StringQueryOperatorInput>;
  readonly title_faqs: InputMaybe<StringQueryOperatorInput>;
  readonly title_team: InputMaybe<StringQueryOperatorInput>;
};

type OurAreasFilterListInput = {
  readonly elemMatch: InputMaybe<OurAreasFilterInput>;
};

type OurAreasFrontmatter = {
  readonly bar_stack: Scalars['String'];
  readonly blog_section: Scalars['Boolean'];
  readonly blog_section_tags: Scalars['String'];
  readonly blog_section_title: Scalars['String'];
  readonly bullet_points: Scalars['String'];
  readonly button: Scalars['String'];
  readonly button2: Scalars['String'];
  readonly description_contact: Scalars['String'];
  readonly description_mdx: Maybe<Scalars['String']>;
  readonly faqs: ReadonlyArray<Maybe<Faqs>>;
  readonly highlighted_word: Scalars['String'];
  readonly image_alt_our_service: Scalars['String'];
  readonly image_alt_our_service_desktop: Maybe<Scalars['String']>;
  readonly image_alt_our_service_mobile: Maybe<Scalars['String']>;
  readonly image_our_service: Maybe<File>;
  readonly image_our_service_desktop: Maybe<File>;
  readonly image_our_service_mobile: Maybe<File>;
  readonly intro: Maybe<Scalars['String']>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly meta_description: Scalars['String'];
  readonly meta_title: Scalars['String'];
  readonly name: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly our_service_id: Scalars['String'];
  readonly our_services_icon: Maybe<File>;
  readonly project: ReadonlyArray<Maybe<Projects>>;
  readonly published: Scalars['Boolean'];
  readonly short_description: Scalars['String'];
  readonly show_case_study: Scalars['Boolean'];
  readonly show_technology_stack: Scalars['Boolean'];
  readonly slug: Scalars['String'];
  readonly team_members: ReadonlyArray<Maybe<Members>>;
  readonly title: Scalars['String'];
  readonly title_case_study: Scalars['String'];
  readonly title_contact: Scalars['String'];
  readonly title_faqs: Scalars['String'];
  readonly title_team: Scalars['String'];
};

type OurAreasFrontmatterFieldSelector = {
  readonly bar_stack: InputMaybe<FieldSelectorEnum>;
  readonly blog_section: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_tags: InputMaybe<FieldSelectorEnum>;
  readonly blog_section_title: InputMaybe<FieldSelectorEnum>;
  readonly bullet_points: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly button2: InputMaybe<FieldSelectorEnum>;
  readonly description_contact: InputMaybe<FieldSelectorEnum>;
  readonly description_mdx: InputMaybe<FieldSelectorEnum>;
  readonly faqs: InputMaybe<FaqsFieldSelector>;
  readonly highlighted_word: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<FieldSelectorEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<FieldSelectorEnum>;
  readonly image_our_service: InputMaybe<FileFieldSelector>;
  readonly image_our_service_desktop: InputMaybe<FileFieldSelector>;
  readonly image_our_service_mobile: InputMaybe<FileFieldSelector>;
  readonly intro: InputMaybe<FieldSelectorEnum>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly our_service_id: InputMaybe<FieldSelectorEnum>;
  readonly our_services_icon: InputMaybe<FileFieldSelector>;
  readonly project: InputMaybe<ProjectsFieldSelector>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly short_description: InputMaybe<FieldSelectorEnum>;
  readonly show_case_study: InputMaybe<FieldSelectorEnum>;
  readonly show_technology_stack: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly team_members: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_case_study: InputMaybe<FieldSelectorEnum>;
  readonly title_contact: InputMaybe<FieldSelectorEnum>;
  readonly title_faqs: InputMaybe<FieldSelectorEnum>;
  readonly title_team: InputMaybe<FieldSelectorEnum>;
};

type OurAreasFrontmatterFilterInput = {
  readonly bar_stack: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section: InputMaybe<BooleanQueryOperatorInput>;
  readonly blog_section_tags: InputMaybe<StringQueryOperatorInput>;
  readonly blog_section_title: InputMaybe<StringQueryOperatorInput>;
  readonly bullet_points: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly button2: InputMaybe<StringQueryOperatorInput>;
  readonly description_contact: InputMaybe<StringQueryOperatorInput>;
  readonly description_mdx: InputMaybe<StringQueryOperatorInput>;
  readonly faqs: InputMaybe<FaqsFilterListInput>;
  readonly highlighted_word: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_desktop: InputMaybe<StringQueryOperatorInput>;
  readonly image_alt_our_service_mobile: InputMaybe<StringQueryOperatorInput>;
  readonly image_our_service: InputMaybe<FileFilterInput>;
  readonly image_our_service_desktop: InputMaybe<FileFilterInput>;
  readonly image_our_service_mobile: InputMaybe<FileFilterInput>;
  readonly intro: InputMaybe<StringQueryOperatorInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly our_service_id: InputMaybe<StringQueryOperatorInput>;
  readonly our_services_icon: InputMaybe<FileFilterInput>;
  readonly project: InputMaybe<ProjectsFilterListInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly short_description: InputMaybe<StringQueryOperatorInput>;
  readonly show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_technology_stack: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly team_members: InputMaybe<MembersFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_case_study: InputMaybe<StringQueryOperatorInput>;
  readonly title_contact: InputMaybe<StringQueryOperatorInput>;
  readonly title_faqs: InputMaybe<StringQueryOperatorInput>;
  readonly title_team: InputMaybe<StringQueryOperatorInput>;
};

type OurAreasFrontmatterSortInput = {
  readonly bar_stack: InputMaybe<SortOrderEnum>;
  readonly blog_section: InputMaybe<SortOrderEnum>;
  readonly blog_section_tags: InputMaybe<SortOrderEnum>;
  readonly blog_section_title: InputMaybe<SortOrderEnum>;
  readonly bullet_points: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly button2: InputMaybe<SortOrderEnum>;
  readonly description_contact: InputMaybe<SortOrderEnum>;
  readonly description_mdx: InputMaybe<SortOrderEnum>;
  readonly faqs: InputMaybe<FaqsSortInput>;
  readonly highlighted_word: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<SortOrderEnum>;
  readonly image_our_service: InputMaybe<FileSortInput>;
  readonly image_our_service_desktop: InputMaybe<FileSortInput>;
  readonly image_our_service_mobile: InputMaybe<FileSortInput>;
  readonly intro: InputMaybe<SortOrderEnum>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly our_service_id: InputMaybe<SortOrderEnum>;
  readonly our_services_icon: InputMaybe<FileSortInput>;
  readonly project: InputMaybe<ProjectsSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly short_description: InputMaybe<SortOrderEnum>;
  readonly show_case_study: InputMaybe<SortOrderEnum>;
  readonly show_technology_stack: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly team_members: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_case_study: InputMaybe<SortOrderEnum>;
  readonly title_contact: InputMaybe<SortOrderEnum>;
  readonly title_faqs: InputMaybe<SortOrderEnum>;
  readonly title_team: InputMaybe<SortOrderEnum>;
};

type OurAreasGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<OurAreasEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<OurAreasGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<OurAreas>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type OurAreasGroupConnection_distinctArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasGroupConnection_groupArgs = {
  field: OurAreasFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type OurAreasGroupConnection_maxArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasGroupConnection_minArgs = {
  field: OurAreasFieldSelector;
};


type OurAreasGroupConnection_sumArgs = {
  field: OurAreasFieldSelector;
};

type OurAreasSortInput = {
  readonly bar_stack: InputMaybe<SortOrderEnum>;
  readonly blog_section: InputMaybe<SortOrderEnum>;
  readonly blog_section_tags: InputMaybe<SortOrderEnum>;
  readonly blog_section_title: InputMaybe<SortOrderEnum>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly bullet_points: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly button2: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly description_contact: InputMaybe<SortOrderEnum>;
  readonly description_mdx: InputMaybe<SortOrderEnum>;
  readonly faqs: InputMaybe<FaqsSortInput>;
  readonly frontmatter: InputMaybe<OurAreasFrontmatterSortInput>;
  readonly highlighted_word: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_desktop: InputMaybe<SortOrderEnum>;
  readonly image_alt_our_service_mobile: InputMaybe<SortOrderEnum>;
  readonly image_our_service: InputMaybe<FileSortInput>;
  readonly image_our_service_desktop: InputMaybe<FileSortInput>;
  readonly image_our_service_mobile: InputMaybe<FileSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly intro: InputMaybe<SortOrderEnum>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly our_service_id: InputMaybe<SortOrderEnum>;
  readonly our_services_icon: InputMaybe<FileSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly project: InputMaybe<ProjectsSortInput>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly short_description: InputMaybe<SortOrderEnum>;
  readonly show_case_study: InputMaybe<SortOrderEnum>;
  readonly show_technology_stack: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly team_members: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_case_study: InputMaybe<SortOrderEnum>;
  readonly title_contact: InputMaybe<SortOrderEnum>;
  readonly title_faqs: InputMaybe<SortOrderEnum>;
  readonly title_team: InputMaybe<SortOrderEnum>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Projects = Node & {
  readonly Hero_Image_alt: Scalars['String'];
  readonly bar_achievements: Scalars['String'];
  readonly body: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly description: Scalars['String'];
  readonly description_contact: Scalars['String'];
  readonly frontmatter: ProjectsFrontmatter;
  readonly hero_image: Maybe<File>;
  readonly hero_image_alt: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<File>;
  readonly internal: Internal;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly our_service: ReadonlyArray<Maybe<OurAreas>>;
  readonly parent: Maybe<Node>;
  readonly project_id: Scalars['String'];
  readonly published: Scalars['Boolean'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly show_case_study: Scalars['Boolean'];
  readonly show_on_homepage: Scalars['Boolean'];
  readonly show_team: Scalars['Boolean'];
  readonly slug: Scalars['String'];
  readonly social_media_previev: Maybe<File>;
  readonly social_media_previev_alt: Scalars['String'];
  readonly tags: Scalars['String'];
  readonly team_members: ReadonlyArray<Maybe<Members>>;
  readonly title: Scalars['String'];
  readonly title_case_study: Scalars['String'];
  readonly title_contact: Scalars['String'];
  readonly title_team: Scalars['String'];
  readonly work_in_progress: Scalars['Boolean'];
};

type ProjectsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ProjectsEdge>;
  readonly group: ReadonlyArray<ProjectsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Projects>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ProjectsConnection_distinctArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsConnection_groupArgs = {
  field: ProjectsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ProjectsConnection_maxArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsConnection_minArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsConnection_sumArgs = {
  field: ProjectsFieldSelector;
};

type ProjectsEdge = {
  readonly next: Maybe<Projects>;
  readonly node: Projects;
  readonly previous: Maybe<Projects>;
};

type ProjectsFieldSelector = {
  readonly Hero_Image_alt: InputMaybe<FieldSelectorEnum>;
  readonly bar_achievements: InputMaybe<FieldSelectorEnum>;
  readonly body: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly description_contact: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<ProjectsFrontmatterFieldSelector>;
  readonly hero_image: InputMaybe<FileFieldSelector>;
  readonly hero_image_alt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly our_service: InputMaybe<OurAreasFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly project_id: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly show_case_study: InputMaybe<FieldSelectorEnum>;
  readonly show_on_homepage: InputMaybe<FieldSelectorEnum>;
  readonly show_team: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly social_media_previev: InputMaybe<FileFieldSelector>;
  readonly social_media_previev_alt: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly team_members: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_case_study: InputMaybe<FieldSelectorEnum>;
  readonly title_contact: InputMaybe<FieldSelectorEnum>;
  readonly title_team: InputMaybe<FieldSelectorEnum>;
  readonly work_in_progress: InputMaybe<FieldSelectorEnum>;
};

type ProjectsFilterInput = {
  readonly Hero_Image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly bar_achievements: InputMaybe<StringQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly description_contact: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<ProjectsFrontmatterFilterInput>;
  readonly hero_image: InputMaybe<FileFilterInput>;
  readonly hero_image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly our_service: InputMaybe<OurAreasFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly project_id: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_on_homepage: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_team: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly social_media_previev: InputMaybe<FileFilterInput>;
  readonly social_media_previev_alt: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly team_members: InputMaybe<MembersFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_case_study: InputMaybe<StringQueryOperatorInput>;
  readonly title_contact: InputMaybe<StringQueryOperatorInput>;
  readonly title_team: InputMaybe<StringQueryOperatorInput>;
  readonly work_in_progress: InputMaybe<BooleanQueryOperatorInput>;
};

type ProjectsFilterListInput = {
  readonly elemMatch: InputMaybe<ProjectsFilterInput>;
};

type ProjectsFrontmatter = {
  readonly Hero_Image_alt: Scalars['String'];
  readonly bar_achievements: Scalars['String'];
  readonly description: Scalars['String'];
  readonly description_contact: Scalars['String'];
  readonly hero_image: Maybe<File>;
  readonly hero_image_alt: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly language: Scalars['String'];
  readonly layout: Scalars['String'];
  readonly order: Maybe<Scalars['Float']>;
  readonly our_service: ReadonlyArray<Maybe<OurAreas>>;
  readonly project_id: Scalars['String'];
  readonly published: Scalars['Boolean'];
  readonly redirect_from: Maybe<Scalars['String']>;
  readonly show_case_study: Scalars['Boolean'];
  readonly show_on_homepage: Scalars['Boolean'];
  readonly show_team: Scalars['Boolean'];
  readonly slug: Scalars['String'];
  readonly social_media_previev: Maybe<File>;
  readonly social_media_previev_alt: Scalars['String'];
  readonly tags: Scalars['String'];
  readonly team_members: ReadonlyArray<Maybe<Members>>;
  readonly title: Scalars['String'];
  readonly title_case_study: Scalars['String'];
  readonly title_contact: Scalars['String'];
  readonly title_team: Scalars['String'];
  readonly work_in_progress: Scalars['Boolean'];
};

type ProjectsFrontmatterFieldSelector = {
  readonly Hero_Image_alt: InputMaybe<FieldSelectorEnum>;
  readonly bar_achievements: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly description_contact: InputMaybe<FieldSelectorEnum>;
  readonly hero_image: InputMaybe<FileFieldSelector>;
  readonly hero_image_alt: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FileFieldSelector>;
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly layout: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly our_service: InputMaybe<OurAreasFieldSelector>;
  readonly project_id: InputMaybe<FieldSelectorEnum>;
  readonly published: InputMaybe<FieldSelectorEnum>;
  readonly redirect_from: InputMaybe<FieldSelectorEnum>;
  readonly show_case_study: InputMaybe<FieldSelectorEnum>;
  readonly show_on_homepage: InputMaybe<FieldSelectorEnum>;
  readonly show_team: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly social_media_previev: InputMaybe<FileFieldSelector>;
  readonly social_media_previev_alt: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly team_members: InputMaybe<MembersFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly title_case_study: InputMaybe<FieldSelectorEnum>;
  readonly title_contact: InputMaybe<FieldSelectorEnum>;
  readonly title_team: InputMaybe<FieldSelectorEnum>;
  readonly work_in_progress: InputMaybe<FieldSelectorEnum>;
};

type ProjectsFrontmatterFilterInput = {
  readonly Hero_Image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly bar_achievements: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly description_contact: InputMaybe<StringQueryOperatorInput>;
  readonly hero_image: InputMaybe<FileFilterInput>;
  readonly hero_image_alt: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly layout: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<FloatQueryOperatorInput>;
  readonly our_service: InputMaybe<OurAreasFilterListInput>;
  readonly project_id: InputMaybe<StringQueryOperatorInput>;
  readonly published: InputMaybe<BooleanQueryOperatorInput>;
  readonly redirect_from: InputMaybe<StringQueryOperatorInput>;
  readonly show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_on_homepage: InputMaybe<BooleanQueryOperatorInput>;
  readonly show_team: InputMaybe<BooleanQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly social_media_previev: InputMaybe<FileFilterInput>;
  readonly social_media_previev_alt: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly team_members: InputMaybe<MembersFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly title_case_study: InputMaybe<StringQueryOperatorInput>;
  readonly title_contact: InputMaybe<StringQueryOperatorInput>;
  readonly title_team: InputMaybe<StringQueryOperatorInput>;
  readonly work_in_progress: InputMaybe<BooleanQueryOperatorInput>;
};

type ProjectsFrontmatterSortInput = {
  readonly Hero_Image_alt: InputMaybe<SortOrderEnum>;
  readonly bar_achievements: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly description_contact: InputMaybe<SortOrderEnum>;
  readonly hero_image: InputMaybe<FileSortInput>;
  readonly hero_image_alt: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly our_service: InputMaybe<OurAreasSortInput>;
  readonly project_id: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly show_case_study: InputMaybe<SortOrderEnum>;
  readonly show_on_homepage: InputMaybe<SortOrderEnum>;
  readonly show_team: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly social_media_previev: InputMaybe<FileSortInput>;
  readonly social_media_previev_alt: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly team_members: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_case_study: InputMaybe<SortOrderEnum>;
  readonly title_contact: InputMaybe<SortOrderEnum>;
  readonly title_team: InputMaybe<SortOrderEnum>;
  readonly work_in_progress: InputMaybe<SortOrderEnum>;
};

type ProjectsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ProjectsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ProjectsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Projects>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ProjectsGroupConnection_distinctArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsGroupConnection_groupArgs = {
  field: ProjectsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ProjectsGroupConnection_maxArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsGroupConnection_minArgs = {
  field: ProjectsFieldSelector;
};


type ProjectsGroupConnection_sumArgs = {
  field: ProjectsFieldSelector;
};

type ProjectsSortInput = {
  readonly Hero_Image_alt: InputMaybe<SortOrderEnum>;
  readonly bar_achievements: InputMaybe<SortOrderEnum>;
  readonly body: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly description_contact: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<ProjectsFrontmatterSortInput>;
  readonly hero_image: InputMaybe<FileSortInput>;
  readonly hero_image_alt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<FileSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly language: InputMaybe<SortOrderEnum>;
  readonly layout: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly our_service: InputMaybe<OurAreasSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly project_id: InputMaybe<SortOrderEnum>;
  readonly published: InputMaybe<SortOrderEnum>;
  readonly redirect_from: InputMaybe<SortOrderEnum>;
  readonly show_case_study: InputMaybe<SortOrderEnum>;
  readonly show_on_homepage: InputMaybe<SortOrderEnum>;
  readonly show_team: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly social_media_previev: InputMaybe<FileSortInput>;
  readonly social_media_previev_alt: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly team_members: InputMaybe<MembersSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly title_case_study: InputMaybe<SortOrderEnum>;
  readonly title_contact: InputMaybe<SortOrderEnum>;
  readonly title_team: InputMaybe<SortOrderEnum>;
  readonly work_in_progress: InputMaybe<SortOrderEnum>;
};

type Query = {
  readonly allBlog: BlogConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFaqs: FaqsConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allJobs: JobsConnection;
  readonly allMdx: MdxConnection;
  readonly allMembers: MembersConnection;
  readonly allOurAreas: OurAreasConnection;
  readonly allProjects: ProjectsConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly blog: Maybe<Blog>;
  readonly directory: Maybe<Directory>;
  readonly faqs: Maybe<Faqs>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly jobs: Maybe<Jobs>;
  readonly mdx: Maybe<Mdx>;
  readonly members: Maybe<Members>;
  readonly ourAreas: Maybe<OurAreas>;
  readonly projects: Maybe<Projects>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allBlogArgs = {
  filter: InputMaybe<BlogFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<BlogSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFaqsArgs = {
  filter: InputMaybe<FaqsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FaqsSortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allJobsArgs = {
  filter: InputMaybe<JobsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<JobsSortInput>>>;
};


type Query_allMdxArgs = {
  filter: InputMaybe<MdxFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MdxSortInput>>>;
};


type Query_allMembersArgs = {
  filter: InputMaybe<MembersFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MembersSortInput>>>;
};


type Query_allOurAreasArgs = {
  filter: InputMaybe<OurAreasFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<OurAreasSortInput>>>;
};


type Query_allProjectsArgs = {
  filter: InputMaybe<ProjectsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ProjectsSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_blogArgs = {
  author: InputMaybe<MembersFilterInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  canonicalUrl: InputMaybe<StringQueryOperatorInput>;
  categories: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  comments: InputMaybe<BooleanQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  extract: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<BlogFrontmatterFilterInput>;
  hidden: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<FileFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  meaningfullyUpdatedAt: InputMaybe<DateQueryOperatorInput>;
  modified: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  secondAuthor: InputMaybe<MembersFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  thirdAuthor: InputMaybe<MembersFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_faqsArgs = {
  answer: InputMaybe<StringQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  faqs_id: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<FaqsFrontmatterFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<FloatQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  question: InputMaybe<StringQueryOperatorInput>;
  show_on_career: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMdx: InputMaybe<MdxFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMdx: InputMaybe<MdxFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_jobsArgs = {
  Show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  button: InputMaybe<StringQueryOperatorInput>;
  button_instagram: InputMaybe<StringQueryOperatorInput>;
  button_linkedin: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<JobsFrontmatterFilterInput>;
  hidden: InputMaybe<BooleanQueryOperatorInput>;
  hours: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image_alt_job: InputMaybe<StringQueryOperatorInput>;
  image_alt_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  image_recruiter_info: InputMaybe<FileFilterInput>;
  imagejob: InputMaybe<FileFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  links_more_about_us: InputMaybe<StringQueryOperatorInput>;
  name_recruiter: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<FloatQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  recruting_image2_title: InputMaybe<StringQueryOperatorInput>;
  recruting_image3_title: InputMaybe<StringQueryOperatorInput>;
  redirect_from: InputMaybe<StringQueryOperatorInput>;
  salary: InputMaybe<StringQueryOperatorInput>;
  salary_max: InputMaybe<FloatQueryOperatorInput>;
  salary_min: InputMaybe<FloatQueryOperatorInput>;
  show_new_title_more_about_us: InputMaybe<BooleanQueryOperatorInput>;
  show_recruiter_info: InputMaybe<BooleanQueryOperatorInput>;
  subtitle: InputMaybe<StringQueryOperatorInput>;
  technology: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  title_more_about_us: InputMaybe<StringQueryOperatorInput>;
  title_recruiter_info: InputMaybe<StringQueryOperatorInput>;
  working_time: InputMaybe<StringQueryOperatorInput>;
  workplace_recruiter: InputMaybe<StringQueryOperatorInput>;
};


type Query_mdxArgs = {
  body: InputMaybe<StringQueryOperatorInput>;
  childBlog: InputMaybe<BlogFilterInput>;
  childFaqs: InputMaybe<FaqsFilterInput>;
  childJobs: InputMaybe<JobsFilterInput>;
  childMembers: InputMaybe<MembersFilterInput>;
  childOurAreas: InputMaybe<OurAreasFilterInput>;
  childProjects: InputMaybe<ProjectsFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenBlog: InputMaybe<BlogFilterListInput>;
  childrenFaqs: InputMaybe<FaqsFilterListInput>;
  childrenJobs: InputMaybe<JobsFilterListInput>;
  childrenMembers: InputMaybe<MembersFilterListInput>;
  childrenOurAreas: InputMaybe<OurAreasFilterListInput>;
  childrenProjects: InputMaybe<ProjectsFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  fields: InputMaybe<MdxFieldsFilterInput>;
  frontmatter: InputMaybe<MdxFrontmatterFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<JSONQueryOperatorInput>;
};


type Query_membersArgs = {
  author_id: InputMaybe<StringQueryOperatorInput>;
  avatar: InputMaybe<FileFilterInput>;
  avatar_hover: InputMaybe<FileFilterInput>;
  bio: InputMaybe<StringQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  crosspost: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  descrption: InputMaybe<StringQueryOperatorInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  ex: InputMaybe<BooleanQueryOperatorInput>;
  frontmatter: InputMaybe<MembersFrontmatterFilterInput>;
  github: InputMaybe<StringQueryOperatorInput>;
  hobby: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  posts: InputMaybe<BlogFilterListInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  redirect_from: InputMaybe<StringQueryOperatorInput>;
  short_name: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  stackoverflow: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  twitter: InputMaybe<StringQueryOperatorInput>;
  web: InputMaybe<StringQueryOperatorInput>;
};


type Query_ourAreasArgs = {
  bar_stack: InputMaybe<StringQueryOperatorInput>;
  blog_section: InputMaybe<BooleanQueryOperatorInput>;
  blog_section_tags: InputMaybe<StringQueryOperatorInput>;
  blog_section_title: InputMaybe<StringQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  bullet_points: InputMaybe<StringQueryOperatorInput>;
  button: InputMaybe<StringQueryOperatorInput>;
  button2: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  description_contact: InputMaybe<StringQueryOperatorInput>;
  description_mdx: InputMaybe<StringQueryOperatorInput>;
  faqs: InputMaybe<FaqsFilterListInput>;
  frontmatter: InputMaybe<OurAreasFrontmatterFilterInput>;
  highlighted_word: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image_alt_our_service: InputMaybe<StringQueryOperatorInput>;
  image_alt_our_service_desktop: InputMaybe<StringQueryOperatorInput>;
  image_alt_our_service_mobile: InputMaybe<StringQueryOperatorInput>;
  image_our_service: InputMaybe<FileFilterInput>;
  image_our_service_desktop: InputMaybe<FileFilterInput>;
  image_our_service_mobile: InputMaybe<FileFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  intro: InputMaybe<StringQueryOperatorInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  meta_description: InputMaybe<StringQueryOperatorInput>;
  meta_title: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<FloatQueryOperatorInput>;
  our_service_id: InputMaybe<StringQueryOperatorInput>;
  our_services_icon: InputMaybe<FileFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  project: InputMaybe<ProjectsFilterListInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  short_description: InputMaybe<StringQueryOperatorInput>;
  show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  show_technology_stack: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  team_members: InputMaybe<MembersFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  title_case_study: InputMaybe<StringQueryOperatorInput>;
  title_contact: InputMaybe<StringQueryOperatorInput>;
  title_faqs: InputMaybe<StringQueryOperatorInput>;
  title_team: InputMaybe<StringQueryOperatorInput>;
};


type Query_projectsArgs = {
  Hero_Image_alt: InputMaybe<StringQueryOperatorInput>;
  bar_achievements: InputMaybe<StringQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  description_contact: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<ProjectsFrontmatterFilterInput>;
  hero_image: InputMaybe<FileFilterInput>;
  hero_image_alt: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<FileFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  language: InputMaybe<StringQueryOperatorInput>;
  layout: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<FloatQueryOperatorInput>;
  our_service: InputMaybe<OurAreasFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  project_id: InputMaybe<StringQueryOperatorInput>;
  published: InputMaybe<BooleanQueryOperatorInput>;
  redirect_from: InputMaybe<StringQueryOperatorInput>;
  show_case_study: InputMaybe<BooleanQueryOperatorInput>;
  show_on_homepage: InputMaybe<BooleanQueryOperatorInput>;
  show_team: InputMaybe<BooleanQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  social_media_previev: InputMaybe<FileFilterInput>;
  social_media_previev_alt: InputMaybe<StringQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  team_members: InputMaybe<MembersFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  title_case_study: InputMaybe<StringQueryOperatorInput>;
  title_contact: InputMaybe<StringQueryOperatorInput>;
  title_team: InputMaybe<StringQueryOperatorInput>;
  work_in_progress: InputMaybe<BooleanQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  mapping: InputMaybe<SiteMappingFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type SimpleMdx = {
  readonly html: Maybe<Scalars['String']>;
};

type SimpleMdxFieldSelector = {
  readonly html: InputMaybe<FieldSelectorEnum>;
};

type SimpleMdxFilterInput = {
  readonly html: InputMaybe<StringQueryOperatorInput>;
};

type SimpleMdxSortInput = {
  readonly html: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly mapping: Maybe<SiteMapping>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly mapping: InputMaybe<SiteMappingFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly mapping: InputMaybe<SiteMappingFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly DEV_SSR: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly DEV_SSR: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly DEV_SSR: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly DEV_SSR: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteMapping = {
  readonly Mdx_frontmatter_faqs: Maybe<Scalars['String']>;
  readonly Mdx_frontmatter_our_service: Maybe<Scalars['String']>;
  readonly Mdx_frontmatter_project: Maybe<Scalars['String']>;
};

type SiteMappingFieldSelector = {
  readonly Mdx_frontmatter_faqs: InputMaybe<FieldSelectorEnum>;
  readonly Mdx_frontmatter_our_service: InputMaybe<FieldSelectorEnum>;
  readonly Mdx_frontmatter_project: InputMaybe<FieldSelectorEnum>;
};

type SiteMappingFilterInput = {
  readonly Mdx_frontmatter_faqs: InputMaybe<StringQueryOperatorInput>;
  readonly Mdx_frontmatter_our_service: InputMaybe<StringQueryOperatorInput>;
  readonly Mdx_frontmatter_project: InputMaybe<StringQueryOperatorInput>;
};

type SiteMappingSortInput = {
  readonly Mdx_frontmatter_faqs: InputMaybe<SortOrderEnum>;
  readonly Mdx_frontmatter_our_service: InputMaybe<SortOrderEnum>;
  readonly Mdx_frontmatter_project: InputMaybe<SortOrderEnum>;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly disqusShortname: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly disqusShortname: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly disqusShortname: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly disqusShortname: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly mapping: InputMaybe<SiteMappingSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AuthorsPageQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type AuthorsPageQuery = { readonly members: { readonly short_name: string, readonly slug: string, readonly title: string | null, readonly description: string, readonly bio: string, readonly name: string, readonly avatar: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null, readonly avatar_hover: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type MyQueryQueryVariables = Exact<{
  groupTags: ReadonlyArray<Scalars['String']> | Scalars['String'];
  skip: Scalars['Int'];
  limit: Scalars['Int'];
}>;


type MyQueryQuery = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly excerpt: string | null, readonly internal: { readonly contentFilePath: string | null }, readonly frontmatter: { readonly excerpt: string | null, readonly comments: boolean | null, readonly author: string | null, readonly author_id: string | null, readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly date: string | null, readonly meaningfullyUpdatedAt: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly fields: { readonly slug: string | null } | null } }> } };

type AboutUsMembersListingQueryVariables = Exact<{ [key: string]: never; }>;


type AboutUsMembersListingQuery = { readonly allMembers: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly slug: string, readonly author_id: string, readonly ex: boolean | null, readonly internal: { readonly contentFilePath: string | null } }> } };

type AuthorsOfBlogPostsQueryVariables = Exact<{ [key: string]: never; }>;


type AuthorsOfBlogPostsQuery = { readonly author: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly internal: { readonly contentFilePath: string | null }, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly date: string | null, readonly meaningfullyUpdatedAt: string | null, readonly author_id: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly fields: { readonly slug: string | null } | null } }> }, readonly secondAuthor: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly internal: { readonly contentFilePath: string | null }, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly date: string | null, readonly meaningfullyUpdatedAt: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly fields: { readonly slug: string | null } | null } }> }, readonly thirdAuthor: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly internal: { readonly contentFilePath: string | null }, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly date: string | null, readonly meaningfullyUpdatedAt: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly fields: { readonly slug: string | null } | null } }> } };

type ServicesQueryVariables = Exact<{ [key: string]: never; }>;


type ServicesQuery = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly frontmatter: { readonly slug: string | null, readonly language: string | null, readonly blog_section_tags: ReadonlyArray<string | null> | null, readonly faqs: ReadonlyArray<{ readonly frontmatter: { readonly question: string | null, readonly slug: string | null, readonly language: string | null } | null } | null> | null } | null, readonly internal: { readonly contentFilePath: string | null } } }> } };

type CareerQueryVariables = Exact<{ [key: string]: never; }>;


type CareerQuery = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly frontmatter: { readonly slug: string | null, readonly language: string | null } | null, readonly internal: { readonly contentFilePath: string | null } } }> } };

type PostsQueryVariables = Exact<{ [key: string]: never; }>;


type PostsQuery = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly tags: ReadonlyArray<string | null> | null, readonly slug: string | null } | null, readonly internal: { readonly contentFilePath: string | null } } }> } };

type PagesQueryVariables = Exact<{ [key: string]: never; }>;


type PagesQuery = { readonly allMdx: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly frontmatter: { readonly slug: string | null, readonly language: string | null } | null, readonly internal: { readonly contentFilePath: string | null } } }> } };

type ActiveMembersQueryVariables = Exact<{ [key: string]: never; }>;


type ActiveMembersQuery = { readonly allMembers: { readonly nodes: ReadonlyArray<{ readonly name: string, readonly author_id: string }> } };


}
